根据 逆波兰表示法，求表达式的值。

有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。

 

说明：

整数除法只保留整数部分。
给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。
 

示例 1：

输入: ["2", "1", "+", "3", "*"]
输出: 9
解释: 该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9
示例 2：

输入: ["4", "13", "5", "/", "+"]
输出: 6
解释: 该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6
示例 3：

输入: ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]
输出: 22
解释: 
该算式转化为常见的中缀算术表达式为：
  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
 

逆波兰表达式：

逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。

平常使用的算式则是一种中缀表达式，如 ( 1 + 2 ) * ( 3 + 4 ) 。
该算式的逆波兰表达式写法为 ( ( 1 2 + ) ( 3 4 + ) * ) 。
逆波兰表达式主要有以下两个优点：

去掉括号后表达式无歧义，上式即便写成 1 2 + 3 4 + * 也可以依据次序计算出正确结果。
适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中。

C++
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        int size = tokens.size();
        stack<int> st;
        int a,t1,t2;

        for(int i=0;i<size;i++){
            if(tokens[i] == "+" || tokens[i] == "-" || tokens[i] == "*" || tokens[i] == "/") {
                if(st.empty()) continue;
                t2 = st.top();
                st.pop();
                t1 = st.top();
                st.pop();
                if(tokens[i] == "+") st.push(t1+t2);
                if(tokens[i] == "-") st.push(t1-t2);
                if(tokens[i] == "*") st.push(t1*t2);
                if(tokens[i] == "/") st.push(t1/t2);
                
            }
            else{
                a = stoi(tokens[i].c_str());
                st.push(a);
            }
        }

        return st.empty() ? 0 : st.top();
    }
};

C++
****************************************************************
本题使用栈后入先出的性质，当遇到算术运算符时，pop出最近进入栈内的两个数字进行运算。运算后需要将结果push回栈内进行下一次运算

当遇到的不是算术运算符时，那就是数字了。直接push到栈中等待运算

关键：本题的初始数据是string类型，需要将其转换成int类型。


class Solution {
public:
    int str2num(string s) //将string转换为int类型的函数，在之后要调用
    {   
        int num;
        stringstream ss(s);
        ss>>num;
        return num;
    }
    int evalRPN(vector<string>& tokens) {
        stack <int> s;
        int n = tokens.size();
        int ans;
        if(tokens[0] != "+" && tokens[0] != "-" && tokens[0] != "*" && tokens[0] != "/") //防止测试数据仅有一个数字
            ans = str2num(tokens[0]);
        for(int i = 0; i <= n - 1 ; ++i) //运算过程
        {
            if(tokens[i] == "+")
            {
                int right = s.top();
                s.pop();
                int left = s.top();
                s.pop();
                ans = left + right;
                s.push(ans);
            }
            else if(tokens[i] == "-")
            {
                int right = s.top();
                s.pop();
                int left = s.top();
                s.pop();
                ans = left - right;
                s.push(ans);
            }
            else if(tokens[i] == "*")
            {
                int right = s.top();
                s.pop();
                int left = s.top();
                s.pop();
                ans = left * right;
                s.push(ans);
            }
            else if(tokens[i] == "/")
            {
                int right = s.top();
                s.pop();
                int left = s.top();
                s.pop();
                ans = left / right;
                s.push(ans);
            }
            else
            {
                int r = str2num(tokens[i]); //遇到数字直接push
                s.push(r);
            }
        }
        return ans;
    }
};

要注意的就是op两边操作数的方向。
另外利用stringstream来进行string到int的转换。
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        if(tokens.empty()) return 0;
        stack<int> numst;
        stringstream ss;
        

        for(int i = 0;i<tokens.size();++i)
        {
            string c = tokens[i] ;
            if(c == "+"||c == "-"||c == "*"||c == "/" ) 
            {
                int temp1 = numst.top(); numst.pop();
                int temp2 = numst.top(); numst.pop();
                int temp3 = 0;
                if(c == "+") {temp3 = temp1+temp2; numst.push(temp3);}
                else if(c == "-") {temp3 = temp2-temp1; numst.push(temp3);}
                else if(c == "*") {temp3 = temp1*temp2; numst.push(temp3);}
                else{temp3 = temp2/temp1; numst.push(temp3);}
            }
            else
            {
            int number;
            ss.clear();
            ss<<c;
            ss>>number;
            
            numst.push(number);
            }
        }
        return numst.top();

        

    }
};

C++版 纯数组模拟栈：

class Solution {
public:
    int evalRPN(vector<string>& tokens) {
		vector<int> numStack (tokens.size()/2 + 1, 0);
		int index = 0;
		for (string s : tokens) {
            char t = s[0];
            // 负数的第一位为符号位，为了不混淆，如果s的长度大于1则用第二位做判断，虽然可能是两位以上整数，但是不影响下面判断
            if(s.length() > 1) t = s[1];
			switch (t) {
			case '+':
				numStack[index - 2] += numStack[index - 1];
                index--;
				break;
			case '-':
				numStack[index - 2] -= numStack[index - 1];
                index--;
				break;
			case '*':
				numStack[index - 2] *= numStack[index - 1];
                index--;
				break;
			case '/':
				numStack[index - 2] /= numStack[index - 1];
                index--;
				break;
			default:
				numStack[index++] = atoi(s.c_str());
				break;
			}
		}
		return numStack[0];
    }
};


栈实现：

class Solution {
public:
    int evalRPN(vector<string>& tokens) {
		stack<int> numStack;
		int op1, op2;
		for (string s : tokens) {
            char t = s[0];
            // 负数的第一位为符号位，为了不混淆，如果s的长度大于1则用第二位做判断，虽然可能是两位以上整数，但是不影响下面判断
            if(s.length() > 1) t = s[1];
			switch (t) {
			case '+':
				op2 = numStack.top();
                numStack.pop();
				op1 = numStack.top();
                numStack.pop();
				numStack.push(op1 + op2);
				break;
			case '-':
				op2 = numStack.top();
                numStack.pop();
				op1 = numStack.top();
                numStack.pop();
				numStack.push(op1 - op2);
				break;
			case '*':
				op2 = numStack.top();
                numStack.pop();
				op1 = numStack.top();
                numStack.pop();
				numStack.push(op1 * op2);
				break;
			case '/':
				op2 = numStack.top();
                numStack.pop();
				op1 = numStack.top();
                numStack.pop();
				numStack.push(op1 / op2);
				break;
			default:
				numStack.push(atoi(s.c_str()));
				break;
			}
		}
		return numStack.top();
    }
};





Java
*************************************************************
相关优化操作：

数组最大长度为tokens.length / 2 + 1
switch代替if-else，效率优化
Integer.parseInt代替Integer.valueOf,减少自动拆箱装箱操作
附两种方法：
纯数组模拟栈实现(推荐)：

lass Solution {
	//纯数组模拟栈实现(推荐)   3 ms	36 MB
	public static int evalRPN(String[] tokens) {
		int[] numStack = new int[tokens.length / 2 + 1];
		int index = 0;
		for (String s : tokens) {
			switch (s) {
			case "+":
				numStack[index - 2] += numStack[--index];
				break;
			case "-":
				numStack[index - 2] -= numStack[--index];
				break;
			case "*":
				numStack[index - 2] *= numStack[--index];
				break;
			case "/":
				numStack[index - 2] /= numStack[--index];
				break;
			default:
				// numStack[index++] = Integer.valueOf(s);
				//valueOf改为parseInt，减少自动拆箱装箱操作
				numStack[index++] = Integer.parseInt(s);
				break;
			}
		}
		return numStack[0];
	}
}

栈实现：
class Solution {
	// 栈实现   8 ms	36.7 MB	
	public static int evalRPN(String[] tokens) {
		Stack<Integer> numStack = new Stack<>();
		Integer op1, op2;
		for (String s : tokens) {
			switch (s) {
			case "+":
				op2 = numStack.pop();
				op1 = numStack.pop();
				numStack.push(op1 + op2);
				break;
			case "-":
				op2 = numStack.pop();
				op1 = numStack.pop();
				numStack.push(op1 - op2);
				break;
			case "*":
				op2 = numStack.pop();
				op1 = numStack.pop();
				numStack.push(op1 * op2);
				break;
			case "/":
				op2 = numStack.pop();
				op1 = numStack.pop();
				numStack.push(op1 / op2);
				break;
			default:
				numStack.push(Integer.valueOf(s));
				break;
			}
		}
		return numStack.pop();
	}
}


Python
*************************************************************
class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        stack = []
        for t in tokens:
            if t in {"+", "-", "/", "*"}:
                tmp1 = stack.pop()
                tmp2 = stack.pop()
                stack.append(str(int(eval(tmp2+t+tmp1))))
            else:
                stack.append(t)
        return stack.pop()     
执行速度太慢, 可能用了eval原因,换一种写法,大家可以借鉴这样写法, 看起来很舒服!

python

class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        stack = []
        plus = lambda a, b : b + a
        sub = lambda a, b: b - a
        mul = lambda a, b: b * a
        div = lambda a, b: int(b / a)
        opt = {
            "+": plus,
            "-": sub,
            "*": mul,
            "/": div
        }
        for t in tokens:
            if t in opt:
                stack.append(opt[t](stack.pop(), stack.pop()))
            else:
                stack.append(int(t))
        return stack.pop()

解法二：栈
首先定义一个列表；
然后遍历整个tokens：
如果当前是符号：弹出最后两个并计算，然后将计算结果加入列表；
其它情况：增加；
最后返回计算结果。


class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        PopList = []
        for i in tokens:
            if i in "+-*/":
                tmp = PopList.pop()
                tmp2 = PopList.pop()
                PopList.append(str(int(eval(tmp2+i+tmp))))
            else:
                PopList.append(i)
        return int(PopList[0])


递归
class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        t, f = tokens.pop(), self.evalRPN
        if t in '+-*/':
            b, a = f(tokens), f(tokens)
            t = eval('a' + t + 'b')
        return int(t)
递归地返回左右表达式操作后结果
eval 函数将字符串看作代码得到输出值



