给定一个整数数组 A，你可以从某一起始索引出发，跳跃一定次数。在你跳跃的过程中，第 1、3、5... 次跳跃称为奇数跳跃，而第 2、4、6... 次跳跃称为偶数跳跃。

你可以按以下方式从索引 i 向后跳转到索引 j（其中 i < j）：

在进行奇数跳跃时（如，第 1，3，5... 次跳跃），你将会跳到索引 j，使得 A[i] <= A[j]，A[j] 是可能的最小值。如果存在多个这样的索引 j，你只能跳到满足要求的最小索引 j 上。
在进行偶数跳跃时（如，第 2，4，6... 次跳跃），你将会跳到索引 j，使得 A[i] >= A[j]，A[j] 是可能的最大值。如果存在多个这样的索引 j，你只能跳到满足要求的最小索引 j 上。
（对于某些索引 i，可能无法进行合乎要求的跳跃。）
如果从某一索引开始跳跃一定次数（可能是 0 次或多次），就可以到达数组的末尾（索引 A.length - 1），那么该索引就会被认为是好的起始索引。

返回好的起始索引的数量。

 

示例 1：

输入：[10,13,12,14,15]
输出：2
解释： 
从起始索引 i = 0 出发，我们可以跳到 i = 2，（因为 A[2] 是 A[1]，A[2]，A[3]，A[4] 中大于或等于 A[0] 的最小值），然后我们就无法继续跳下去了。
从起始索引 i = 1 和 i = 2 出发，我们可以跳到 i = 3，然后我们就无法继续跳下去了。
从起始索引 i = 3 出发，我们可以跳到 i = 4，到达数组末尾。
从起始索引 i = 4 出发，我们已经到达数组末尾。
总之，我们可以从 2 个不同的起始索引（i = 3, i = 4）出发，通过一定数量的跳跃到达数组末尾。
示例 2：

输入：[2,3,1,1,4]
输出：3
解释：
从起始索引 i=0 出发，我们依次可以跳到 i = 1，i = 2，i = 3：

在我们的第一次跳跃（奇数）中，我们先跳到 i = 1，因为 A[1] 是（A[1]，A[2]，A[3]，A[4]）中大于或等于 A[0] 的最小值。

在我们的第二次跳跃（偶数）中，我们从 i = 1 跳到 i = 2，因为 A[2] 是（A[2]，A[3]，A[4]）中小于或等于 A[1] 的最大值。A[3] 也是最大的值，但 2 是一个较小的索引，所以我们只能跳到 i = 2，而不能跳到 i = 3。

在我们的第三次跳跃（奇数）中，我们从 i = 2 跳到 i = 3，因为 A[3] 是（A[3]，A[4]）中大于或等于 A[2] 的最小值。

我们不能从 i = 3 跳到 i = 4，所以起始索引 i = 0 不是好的起始索引。

类似地，我们可以推断：
从起始索引 i = 1 出发， 我们跳到 i = 4，这样我们就到达数组末尾。
从起始索引 i = 2 出发， 我们跳到 i = 3，然后我们就不能再跳了。
从起始索引 i = 3 出发， 我们跳到 i = 4，这样我们就到达数组末尾。
从起始索引 i = 4 出发，我们已经到达数组末尾。
总之，我们可以从 3 个不同的起始索引（i = 1, i = 3, i = 4）出发，通过一定数量的跳跃到达数组末尾。
示例 3：

输入：[5,1,3,4,2]
输出：3
解释： 
我们可以从起始索引 1，2，4 出发到达数组末尾。
 

提示：

1 <= A.length <= 20000
0 <= A[i] < 100000


C++
********************************************************************
方法一
思路
转移方程
dp[i][0] / dp[i][1] 代表i位置开始奇数/偶数跳跃能否跳到终点
从末尾向前遍历
dp[i][0] = dp[j][1] //奇数跳跃能否到达末尾取决于下一跳的偶数跳跃是否能到达末尾
dp[i][1] = dp[j][0] //偶数跳跃能否到达末尾取决于下一跳的奇数跳跃是否能到达末尾
如果没有满足要求的下一跳j，则dp[i][0/1] = false;
最后dp[i][0]=true的个数即为作为起点可以跳到终点的数量

找下一跳的位置
使用set存储值和索引，logn内可找到下一跳索引位置
直接使用lower_bound找到第一个>=A[i]的索引即为奇数跳跃的位置，前一个即为偶数跳跃的位置。
例如：(注意是从后往前)

1 2 3 1 1 3 3
当查找A[2]的下一跳位置时，set内包含{<1,3>, <1,4>, <3,5>, <3,6>}
使用lower_bound找到<3,5>为奇数跳跃的位置，前一个<1,4>即为<=A[i]的最大值
但是偶数跳跃的位置需要取索引最小的位置，因此还需要往前遍历找到=1的最小索引

class Solution {
public:
    int oddEvenJumps(vector<int>& A) {
        int size = A.size();
        vector<vector<bool>> dp(size,vector<bool>(2,false));

        if(A.empty()) return 0;
        if(size==1) return 1;

        set<pair<int,int>> st;
        
        dp[size - 1][0] = dp[size - 1][1] = true;
        st.insert(make_pair(A[size - 1], size - 1));

        for(int i = size - 2; i >= 0; i--) {
            //找到第一个>=A[i]的值,奇跳跃
            auto it = st.lower_bound(make_pair(A[i],i)); 

            dp[i][0] = it == st.end() ? false : dp[it->second][1];
            
            //找到第一个<=A[i]的值，偶跳跃
            while(it == st.end() || (it != st.begin() && it->first > A[i])) {
                it--;
            }

            //值有多个时，取索引最小的
            int tmp = it->first;
            if(it != st.begin()) {
                it--;
                while(it != st.begin() && it->first == tmp) it--; 
                if(it->first != tmp) it++;
            }

            dp[i][1] = it->first > A[i] ? false : dp[it->second][0];

            st.insert(make_pair(A[i],i));
        }
        
        int ans = 0;
        for(int i = 0; i < A.size(); i++) if(dp[i][0]) ans++;
        return ans;
    }
};

方法二

解题思路
假设dp[i][0/1]表示从A[i]开始，先进行 偶跳跃/奇跳跃 ，能否到达终点，则状态转移方程为：

dp[i][0] = dp[A[i]通过偶跳跃到达的下一个索引j(j>i)][1]
dp[i][1] = dp[A[i]通过奇跳跃到达的下一个索引j(j>i)][0]
则最后要求的答案为：dp[i][1]=1的起始点i的个数

因此，现在要解决的问题就是：如何求A[i]通过 偶跳跃/奇跳跃 后到达的下一个索引j

观察发现，从后往前遍历A[i]，A[i]下一步会跳到的地方只与已经遍历过的A[i+1,...]的值以及当前是奇跳跃还是偶跳跃有关：

奇跳跃：跳到略大于A[i]的(大于A[i]的数里最小的)、索引最小的值
偶跳跃：跳到略小于A[i]的(小于A[i]的数里最大的)、索引最小的值
为了达到O(nlogn)的时间复杂度，需要上述的每一次跳跃步骤在O(logn)内完成，因而想到了用可排序的set，插入和查找都是O(logn)

方法一
class Solution {
public:
    int oddEvenJumps(vector<int>& A) {
        int size = A.size();
        if(size == 1) return 1;
        vector<vector<bool>> dp(size, vector<bool>(2, false));
        dp[size-1][0] = true;//从终点开始无奇偶跳跃都为true
        dp[size-1][1] = true;
        set<pair<int, int>> idxs;//升序存储已经遍历过的<A[i], i>数据对
        idxs.insert(make_pair(A[size-1], size-1));
        int ans = 1;
        for(int i = size-2; i >= 0; i--){//从后向前遍历
            auto it = idxs.upper_bound(make_pair(A[i], i));//返回的指针严格大于搜索值
            if(it == idxs.end()){//无法进行奇跳跃
                //偶跳跃
                it--;
                int next = it->first;//遍历过的略小于A[i]的数，即小于A[i]的数里最大的那个
                //要一直找到值为该数的索引最小的那个数
                while(it != idxs.begin() && it->first == next)
                    it--;
                if(it != idxs.begin() || (it == idxs.begin() && it->first != next))
                    it++;
                dp[i][0] = dp[it->second][1];
            }
            else if(it->first > A[i]){//可以奇跳跃到更大的数
                dp[i][1] = dp[it->second][0];//当前所指就是遍历过的略大于A[i]的数里索引最小的
                if(it != idxs.begin()){//可以进行偶跳跃到更小的数
                    it--;
                    int next = it->first;
                    while(it != idxs.begin() && it->first == next)
                        it--;
                    if(it != idxs.begin() || (it == idxs.begin() && it->first != next)){
                            it++;
                    }
                    dp[i][0] = dp[it->second][1];
                }
            }
            else{//遍历过的数里有和A[i]相等的，奇偶跳跃都会到该数上
                dp[i][0] = dp[it->second][1];
                dp[i][1] = dp[it->second][0];
            }
            if(dp[i][1]) ans++;
            idxs.insert(make_pair(A[i], i));
        }
        return ans;
    }
};

方法二
class Solution {
private:
    vector<int> getNextJumps(vector<int> &sortIdx) {
        int n = sortIdx.size();
        vector<int> next(n, -1);
        stack<int> monoStack;
        // use monotonous decreasing stack to keep track of the indices
        for (int &idx: sortIdx) {
            while (!monoStack.empty() && monoStack.top() < idx) {
                next[monoStack.top()] = idx;
                monoStack.pop();
            }
            monoStack.push(idx);
        }
        return next;
    }
public:
    int oddEvenJumps(vector<int>& A) {
        int n = A.size();
        vector<int> oddNext(n, -1), evenNext(n, -1), sortIdx = vector<int> (n);
        stack<int> decStack;
        for (int i = 0; i < n; i++)
            sortIdx[i] = i;
        // take special care to index! when equal, smaller index first!
        auto incCmp = [&A](int &a, int &b) {
            if (A[a] == A[b])
                return a < b;
            return A[a] < A[b];
        };
        auto decCmp = [&A](int &a, int &b) {
            if (A[a] == A[b])
                return a < b;
            return A[a] > A[b];
        };
        sort(sortIdx.begin(), sortIdx.end(), incCmp);
        oddNext = getNextJumps(sortIdx);
        sort(sortIdx.begin(), sortIdx.end(), decCmp);
        evenNext = getNextJumps(sortIdx);
        // dynamic programming from bottom to top
        vector<bool> oddOk(n), evenOk(n);
        oddOk[n - 1] = evenOk[n - 1] = true; // already at last position
        for (int i = n - 2; i >= 0; i--) {
            if (oddNext[i] != -1)
                oddOk[i] = evenOk[oddNext[i]];
            if (evenNext[i] != -1)
                evenOk[i] = oddOk[evenNext[i]];
        }
        // count all odd ok: start from every position at 1st jump, which is odd
        int res = 0;
        for (int i = 0; i < n; i++)
            res += oddOk[i];
        return res;
    }
};

方法三
class Solution {
public:
    int oddEvenJumps(vector<int>& A) {
        int n = A.size();
        map<int, int> orderIdx;
        vector<bool> oddOk(n), evenOk(n);
        // already at final position
        oddOk[n - 1] = evenOk[n - 1] = true;
        orderIdx[A[n - 1]] = n - 1;
        for (int i = n - 2; i >= 0; i--) {
            // dynamic programming
            if (orderIdx.find(A[i]) != orderIdx.end()) {
                oddOk[i] = evenOk[orderIdx[A[i]]];
                evenOk[i] = oddOk[orderIdx[A[i]]];
                orderIdx[A[i]] = i;
            } else {
                orderIdx[A[i]] = i;
                auto it = orderIdx.find(A[i]), prevIt = prev(it, 1), nextIt = next(it, 1);
                // find previous element and next element
                if (nextIt != orderIdx.end())
                    oddOk[i] = evenOk[nextIt->second];
                if (it != orderIdx.begin())
                    evenOk[i] = oddOk[prevIt->second];
            }
        }
        int res = 0;
        for (bool ok: oddOk)
            res += ok;
        return res;
    }
};




Java
******************************************************************
class Solution {
    public int oddEvenJumps(int[] A) {
        int n = A.length;
        Integer[] arr = new Integer[n];
        for (int i = 0; i < n; i++){
            arr[i] = i;
        }
        Arrays.sort(arr, (a, b) -> A[a] == A[b] ? a - b : A[a] - A[b]);
        int[] sin = order(arr);
        Arrays.sort(arr, (a, b) -> A[a] == A[b] ? a - b : A[b] - A[a]);
        int[] dou = order(arr);
        int[][] dp = new int[n][2];
        dp[n - 1][0] = 1;
        dp[n - 1][1] = 1;
        for (int i = n - 2; i >= 0; i--){
            if (sin[i] != -1 && dp[sin[i]][1] == 1) dp[i][0] = 1; 
            if (dou[i] != -1 && dp[dou[i]][0] == 1) dp[i][1] = 1;
        }
        int count = 0;
        for (int i = 0; i < n; i++){
            if (dp[i][0] == 1) count++;
        }
        return count;
    }
    int[] order(Integer[] arr){
        Deque<Integer> deque = new LinkedList<>();
        int[] res = new int[arr.length];
        Arrays.fill(res, -1);
        deque.addLast(arr[0]);
        for (int i = 1; i < arr.length; i++){
            while(!deque.isEmpty() && deque.peekLast() < arr[i]){
                res[deque.pollLast()] = arr[i];
            }
            deque.addLast(arr[i]);
        }
        return res;
    }
}

方法二： 树映射（Tree Map）
思路

在 方法一 中，原问题简化为：奇数次跳跃时，对于一些索引 i，下一步应该跳到哪里去（如果有的话）。

算法

我们可以使用 TreeMap，一个维护有序数据的绝佳数据结构。我们将索引 i 映射到 v = A[i] 上。

从 i = N-2 到 i = 0 的遍历过程中，对于 v = A[i]， 我们想知道比它略大一点和略小一点的元素是谁。 TreeMap.lowerKey 与 TreeMap.higherKey 函数就是用来做这样一件事情的。

了解这一点之后，解法接下来的内容就非常直接了： 我们使用动态规划来维护 odd[i] 和 even[i]：从索引 i 出发奇数次跳跃与偶数次跳跃是否能到达数组末尾。
class Solution {
    public int oddEvenJumps(int[] A) {
        int N = A.length;
        if (N <= 1) return N;
        boolean[] odd = new boolean[N];
        boolean[] even = new boolean[N];
        odd[N-1] = even[N-1] = true;

        TreeMap<Integer, Integer> vals = new TreeMap();
        vals.put(A[N-1], N-1);
        for (int i = N-2; i >= 0; --i) {
            int v = A[i];
            if (vals.containsKey(v)) {
                odd[i] = even[vals.get(v)];
                even[i] = odd[vals.get(v)];
            } else {
                Integer lower = vals.lowerKey(v);
                Integer higher = vals.higherKey(v);

                if (lower != null)
                    even[i] = odd[vals.get(lower)];
                if (higher != null) {
                    odd[i] = even[vals.get(higher)];
                }
            }
            vals.put(v, i);
        }

        int ans = 0;
        for (boolean b: odd)
            if (b) ans++;
        return ans;
    }
}
复杂度分析

时间复杂度：O(NlogN)，其中 N 是数组 A 的长度。

空间复杂度：O(N)。




Python
**************************************************************************
方法一：单调栈
思路

首先，我们可以发现下一步应该跳到哪里只与我们当前的位置与跳跃次数的奇偶性有关系。

对于每一种状态，接下来可以跳到的状态一定只有一种（或者接下来不能跳跃了）。如果我们使用某种方法知道了不同状态之间的转移关系，我们就可以通过一次简单的遍历解决这个问题了。

于是，问题就简化为了：从索引 i 进行奇数次跳跃时，下一步应该跳到哪里去（如果有的话）。偶数次跳跃也是类似的。

算法

假设当前是奇数次跳跃，让我们来搞清楚在索引 i 的位置接下来应该跳到哪里去。

我们从小到大考虑数组 A 中的元素。假设当前我们正在考虑 A[j] = v，在我们已经处理过但是还未确定下一步跳跃位置的索引中（也就是 <= v 的那些）进行搜索。 如果我们找到了某些已经处理过的值 v0 = A[i] 且 i < j，那么我们就可以知道从索引 i 下一步应该跳跃到索引 j 的位置。

这种朴素的方法有一点点慢，然而我们可以使用一个很常见的技巧 单调栈 来加速这个过程。

我们在栈中保存所有已经处理过的索引 i ，并且时时刻刻维护这个栈中的元素是递减的。当我们增加一个新的索引 j 的时候，我们弹出栈顶比较小的索引 i < j，并且记录这些索引下一步全都会跳跃到索引 j。

然后，我们就知道所有的 oddnext[i]，也就是位于索引 i 在奇数次跳跃时将会跳到的位置。使用类似的方法，我们也可以求出 evennext[i]。有了这些信息，我们就可以使用动态规划的技巧快速建立所有可达状态。


class Solution(object):
    def oddEvenJumps(self, A):
        N = len(A)

        def make(B):
            ans = [None] * N
            stack = []  # invariant: stack is decreasing
            for i in B:
                while stack and i > stack[-1]:
                    ans[stack.pop()] = i
                stack.append(i)
            return ans

        B = sorted(range(N), key = lambda i: A[i])
        oddnext = make(B)
        B.sort(key = lambda i: -A[i])
        evennext = make(B)

        odd = [False] * N
        even = [False] * N
        odd[N-1] = even[N-1] = True

        for i in xrange(N-2, -1, -1):
            if oddnext[i] is not None:
                odd[i] = even[oddnext[i]]
            if evennext[i] is not None:
                even[i] = odd[evennext[i]]

        return sum(odd)
复杂度分析

时间复杂度：O(NlogN)，其中 N 是数组 A 的长度。

空间复杂度：O(N)。

Java版本
class Solution {
    public int oddEvenJumps(int[] A) {
        int n = A.length;
        Integer[] arr = new Integer[n];
        for (int i = 0; i < n; i++){
            arr[i] = i;
        }
        Arrays.sort(arr, (a, b) -> A[a] == A[b] ? a - b : A[a] - A[b]);
        int[] sin = order(arr);
        Arrays.sort(arr, (a, b) -> A[a] == A[b] ? a - b : A[b] - A[a]);
        int[] dou = order(arr);
        int[][] dp = new int[n][2];
        dp[n - 1][0] = 1;
        dp[n - 1][1] = 1;
        for (int i = n - 2; i >= 0; i--){
            if (sin[i] != -1 && dp[sin[i]][1] == 1) dp[i][0] = 1; 
            if (dou[i] != -1 && dp[dou[i]][0] == 1) dp[i][1] = 1;
        }
        int count = 0;
        for (int i = 0; i < n; i++){
            if (dp[i][0] == 1) count++;
        }
        return count;
    }
    int[] order(Integer[] arr){
        Deque<Integer> deque = new LinkedList<>();
        int[] res = new int[arr.length];
        Arrays.fill(res, -1);
        deque.addLast(arr[0]);
        for (int i = 1; i < arr.length; i++){
            while(!deque.isEmpty() && deque.peekLast() < arr[i]){
                res[deque.pollLast()] = arr[i];
            }
            deque.addLast(arr[i]);
        }
        return res;
    }
}






