编写一个 StockSpanner 类，它收集某些股票的每日报价，并返回该股票当日价格的跨度。

今天股票价格的跨度被定义为股票价格小于或等于今天价格的最大连续日数（从今天开始往回数，包括今天）。

例如，如果未来7天股票的价格是 [100, 80, 60, 70, 60, 75, 85]，那么股票跨度将是 [1, 1, 1, 2, 1, 4, 6]。

 

示例：

输入：["StockSpanner","next","next","next","next","next","next","next"], [[],[100],[80],[60],[70],[60],[75],[85]]
输出：[null,1,1,1,2,1,4,6]
解释：
首先，初始化 S = StockSpanner()，然后：
S.next(100) 被调用并返回 1，
S.next(80) 被调用并返回 1，
S.next(60) 被调用并返回 1，
S.next(70) 被调用并返回 2，
S.next(60) 被调用并返回 1，
S.next(75) 被调用并返回 4，
S.next(85) 被调用并返回 6。

注意 (例如) S.next(75) 返回 4，因为截至今天的最后 4 个价格
(包括今天的价格 75) 小于或等于今天的价格。
 

提示：

调用 StockSpanner.next(int price) 时，将有 1 <= price <= 10^5。
每个测试用例最多可以调用  10000 次 StockSpanner.next。
在所有测试用例中，最多调用 150000 次 StockSpanner.next。
此问题的总时间限制减少了 50%。

C++
class StockSpanner {
public:
    stack<pair<int,int>> st;

    StockSpanner() {

    }
    
    int next(int price) {
        int count = 1;
        while(!st.empty() && st.top().first <= price){
            count += st.top().second;
            st.pop();
        }

        st.push({price,count});

        return count;
    }
};

/**
 * Your StockSpanner object will be instantiated and called as such:
 * StockSpanner* obj = new StockSpanner();
 * int param_1 = obj->next(price);
 */
 
 C++
 ********************************************************
 方法一
 class StockSpanner {
public:
    vector<int> prices;
    stack<int> s;
    vector<int> ans;
    StockSpanner() {
    }
    int next(int price) {
        prices.push_back(price);
        int ret = prices.size() - 1;
        while(!s.empty() && prices[s.top()] <= price){
            ret = ans[s.top()];
            s.pop();
        }
        s.push(prices.size() - 1);
        ans.push_back(ret);
        return prices.size() - ret;
    }
};

方法二
class StockSpanner{
public:
    vector<int> prices; // 存储目前为止的价格
    stack<int> s; // 存储到目前元素为之，每个比其大的元素的索引和本元素自己的索引
    vector<int> littPriPos; // 存储每个点的比自己小的步数的连续开始位置

    int next(int price){
        prices.push_back(price); // 收集价格
        int n = prices.size(); // prices 数组的大小

        int steps = 1; // 起始回退步数为1，包含自己
        // 因为新输入的price都比上一个大了，那么之前比上一个小的price更不用考虑了，这也是s栈能够实用的必要条件之一
        while(!s.empty() && prices[s.top()] <= price){
            steps = n - littPriPos[s.top()]; // 更新步数
            s.pop(); // 将这个失效的当前价格步数删除
        }
        s.push(n - 1); // 将新输入的价格放进s栈中
        littPriPos.push_back(n - steps); // 存储当前价格所对应的比自己小的步数的连续开始位置
        return steps; // 返回步数
    }
};

Java
*************************************************
方法一：单调栈
分析

求出小于或等于今天价格的最大连续日数等价于求出最近的一个大于今日价格的日子。如果第 i 天的价格为 A[i]，第 j 天的价格为 A[j]，满足 i < j 且 A[i] <= A[j]，那么在第 j 天之后，第 i 天不会是任何一天询问的答案，因为如果对于第 k, k > j 天而言，第 i 天是最近的一个大于今日价格的日子，但第 j 天出现在第 i 天之后且价格不低于第 i 天，因此出现了矛盾。

有了这样一个结论，我们只需要维护一个单调递减的序列，称之为”单调栈“。例如股票每天的价格为 [11, 3, 9, 5, 6, 4]，那么每天结束之后，对应的单调栈分别为：


[11]
[11, 3]
[11, 9]
[11, 9, 5]
[11, 9, 6]
[11, 9, 6, 4]
当我们得到了新的一天的价格（例如 7）时，我们将栈中所有小于等于 7 的元素全部取出，因为根据之前的结论，这些元素不会成为后续询问的答案。当栈顶的元素大于 7 时，我们就得到最近的一个大于 7 的价格为 9。

算法

我们用单调栈维护一个单调递减的价格序列，并且对于每个价格，存储一个 weight 表示它离上一个价格之间（即最近的一个大于它的价格之间）的天数。如果是栈底的价格，则存储它本身对应的天数。例如 [11, 3, 9, 5, 6, 4, 7] 对应的单调栈为 (11, weight=1), (9, weight=2), (7, weight=4)。

当我们得到了新的一天的价格，例如 10，我们将所有栈中所有小于等于 10 的元素全部取出，将它们的 weight 进行累加，再加上 1 就得到了答案。在这之后，我们把 10 和它对应的 weight 放入栈中，得到 (11, weight=1), (10, weight=7)。

class StockSpanner {
    Stack<Integer> prices, weights;

    public StockSpanner() {
        prices = new Stack();
        weights = new Stack();
    }

    public int next(int price) {
        int w = 1;
        while (!prices.isEmpty() && prices.peek() <= price) {
            prices.pop();
            w += weights.pop();
        }

        prices.push(price);
        weights.push(w);
        return w;
    }
}

Python
********************
class StockSpanner(object):
    def __init__(self):
        self.stack = []

    def next(self, price):
        weight = 1
        while self.stack and self.stack[-1][0] <= price:
            weight += self.stack.pop()[1]
        self.stack.append((price, weight))
        return weight


复杂度分析

时间复杂度：O(Q)，其中 Q 是调用 next() 函数的次数。

空间复杂度：O(Q)。

方法二
动态规划 —— 空间换时间
解题思路
此解法借鉴了题解区一位大佬的思想
首先，根据提示
new两个int型数组：

一个用于存放 每日股票价格
一个用于存放 每日股票价格跨度
在范围内，当天股票价格大于等于数组中当前元素时，
让结果增加当前股票价格跨度，并使得下标前移 股票价格跨度 个单元(跟比当前股票大的数值比较)
得出结果，记录两个数组中，即可！

class StockSpanner {
    private int[] stockPrice;
    private int[] stockWeight;

    private int curIndex = -1;

    public StockSpanner() {
        stockPrice = new int[10000];
        stockWeight = new int[10000];
    }

    public int next(int price) {
        int res = 1;

        int i = curIndex;
        while (i >= 0 && price >= stockPrice[i]) {
            res += stockWeight[i];
            i -= stockWeight[i];
        }
        stockPrice[++curIndex] = price;
        stockWeight[curIndex] = res;

        return res;
    }
}

/**
 * Your StockSpanner object will be instantiated and called as such:
 * StockSpanner obj = new StockSpanner();
 * int param_1 = obj.next(price);
 */

方法三
跳跃链表维持递减序列

解题思路
设计链表结构，pre指向大于当前股票的节点，这样pre节点保存了之前插入节点的较大值，并维持一个递增序列；每次插入节点只需遍历pre指针并统计数目。

代码

class StockSpanner {
    Node tail;

    public StockSpanner() {
        this.tail = new Node(-1, 0, null);
    }
    
    public int next(int price) {
        Node cur = new Node(price, 1, tail);
        Node temp = tail;
        tail = tail.next = cur;
        
        while (temp.price != -1 && temp.price <= price) {
            cur.count += temp.count;
            temp = temp.pre;
        }
        cur.pre = temp;
        return cur.count;
    }
}

class Node {
    int price;
    int count;

    // 指向前面大于当前股价的节点
    Node pre;
    // 后继节点
    Node next;

    Node(int price, int count, Node pre) {
        this.price = price;
        this.count = count;
        this.pre = pre;
    }
}
 时间复杂度为O(N)，空间复杂度为O(N)。

执行用时：27ms，在所有java提交中击败了99.06%的用户。

内存消耗：48.5MB，在所有java提交中击败了100.00%的用户。

方法四
思路：

list记录价格，stepList记录某天相对于其之前天数的跨度；
当天跨度初始值为int ans = 1，因为最先对比前一天，所以初始对比天数为int day = list.size() - 1;；
先对比前一天价格，如果price小于前一天，直接返回1，否则获取前一天的跨度，假设为int step = stepList.get(day)，天数往前跳step天(即day -= stepList.get(day);),跳跃后如果那天价格大于当前price，则返回ans,并记录到2个List里，否则继续循环操作此步骤；
如果遍历结束了仍没找到，说明前面几天都比它小，ans为前一天跨度+1。

public class StockSpanner {
    List<Integer> list;
    List<Integer> stepList;

    public StockSpanner() {
        list = new ArrayList<>();
        stepList = new ArrayList<>();
    }

    public int next(int price) {
        //第一天肯定是1
        if (list.size() == 0) {
            list.add(price);
            stepList.add(1);
            return 1;
        }

        int ans = 1;//跨度
        for (int day = list.size() - 1;day > -1;) {
            if (list.get(day) > price) {
                //如果跳跃后已经大于price，找到结果，存到list
                list.add(price);
                stepList.add(ans);
                return ans;
            }
            //跨度加上前一天的跨度
            ans += stepList.get(day);
            //天数往前跳跃
            day -= stepList.get(day);
        }
        list.add(price);
        stepList.add(ans);
        return ans;
    }
}

方法五
双动态数组
准备两数组，一个放原始价格，一个放对应的输出结果。
当前原始数组的最后一个元素小于等于新元素的时候，拿之前算好的输出结果，中间就不需要重复计算了，直接跳到前面的位置找对应位置的元素 是否满足，重复这个过程，直到不满足条件。将整个过程的结果累加，作为新输入的结果

class StockSpanner {

	private List<Integer> list;
	private List<Integer> rests;

	public StockSpanner() {
		list = new ArrayList<>();
		rests = new ArrayList<>();
	}

	public int next(int price) {

		int va = 1;
		for (int i = list.size() - 1; i >= 0;) {
			if (list.get(i) > price) {
				break;
			}
			int dqwd = rests.get(i);
			va += dqwd;
			i -= dqwd;
		}
		list.add(price);
		rests.add(va);

		return va;
	}
}

python
**************************************************
方法一 动态规划+单调栈 
思路：

动态规划。我们用数组stock代表每天股票的价格，直接遍历不是最好的方法，在第i次调用函数next的时候，我们考虑第i-1天的股票价格：若第i-1天股票价格大于第i天，我们应该返回答案1；若第i-1天的股票价格小于等于第i天，那么第i-1天左边连续小于等于i-1天的股票价格显然也小于等于第i天的股票价格，如果我们用spanner数组表示每次next函数输出的结果，那么我们只需要从第i-1天开始，跳过spanner[i-1]天，再继续检查第i-spanner[i-1]天的股票价格即可。

这个过程也可以用单调栈实现，这道题的本质是寻找每个数左边第一个比它严格大的数字，故可以采用单调栈的思想，维护一个单调递减的栈，栈中存放数字的下标，每次新加入一个数字时，若栈顶小于等于当前数字，则出栈直到栈空或者栈顶严格大于当前数字，最终栈顶距离新插入数字的下标的距离就是答案，然后将新数字压栈。

代码还可以进一步优化，当第i次调用next函数的时候，前i-1天小于第i天的股票价格就没必要保存了，我们直接在单调栈中，既保存股票价格又保存股票价格的时间跨度即可。

时间复杂度O(N)

空间复杂度O(N)
class StockSpanner:
    
    def __init__(self):
        self.stock = []
        self.spanner = []
        self.length = 0

    def next(self, price):
        """
        :type price: int
        :rtype: int
        """
        ans = 1
        i = self.length - 1
        while i >= 0 and self.stock[i] <= price:
            ans += self.spanner[i]
            i -= self.spanner[i]
            
        self.length += 1
        self.stock.append(price)
        self.spanner.append(ans)
        
        return ans



单调栈实现


class StockSpanner:

    def __init__(self):
        self.stock = []
        self.stack = []
        self.length = 0

    def next(self, price):
        """
        :type price: int
        :rtype: int
        """
        ans = 0
        while self.stack and self.stock[self.stack[-1]] <= price:
            self.stack.pop()
        
        if not self.stack:
            ans = self.length + 1
        else:
            ans = self.length - self.stack[-1]
        self.stock.append(price)
        self.stack.append(self.length)
        
        self.length += 1
        
        return ans



进一步优化


class StockSpanner(object):

    def __init__(self):
        self.stack = []

    def next(self, price):
        """
        :type price: int
        :rtype: int
        """
        ans = 1
        while self.stack and self.stack[-1][0] <= price:
            ans += self.stack.pop()[1]
        self.stack.append((price, ans))
        return ans

# Your StockSpanner object will be instantiated and called as such:
# obj = StockSpanner()
# param_1 = obj.next(price)

解法一：每次调用next后将股票值存储起来，随后向前搜索
next 时间复杂度O(n)， n次next下总共的时间复杂度为O(n²)
空间复杂度 O(n)

解法二：规律（动态规划）
如果当前股票价格比昨天的低，那么跨度必定为1。
如果当前股票价格大于等于昨天价格，则可以利用此前的跨度跳跃的往前搜索。

时间复杂度分析：
如果当前股票价格比昨天的低，那么跨度为1，只需O(1)的时间复杂度
如果当前股票价格大于等于昨天价格，每次依赖于此前的跨度，最坏情况下为O(n)，但是普遍情况下只需要依赖前几个跳板即可完成。

看这个例子会清晰很多


s = StockSpanner()
s.next(90)  
s.next(80)
s.next(70)
s.next(60)
s.next(50)
s.next(100)

相应的跳板序列
[(90, 1)]   O(1)
[(90, 1), (80, 1)]  O(1)
[(90, 1), (80, 1), (70, 1)]     O(1)
[(90, 1), (80, 1), (70, 1), (60, 1)]    O(1)
[(90, 1), (80, 1), (70, 1), (60, 1), (50, 1)]   O(n)
next复杂度  (O(1) + O(1) + O(1) + O(n)) / n = O(1)
next 时间复杂度均摊下为 O(1)， 总体时间复杂度为O(n)
空间复杂度为两个数组 O(n)

代码如下：


class StockSpanner:

    def __init__(self):
        self.degree = 0
        self.prev = 1 << 31
        self.degrees = []
        self.stock = []

    def next(self, price: int) -> int:
        self.stock.append(price)

        if price < self.prev:
            self.degrees.append(1)
        else:
            d = 1
            j = len(self.stock) - 2
            while j >= 0 and self.stock[-1] >= self.stock[j]:
                d += self.degrees[j]
                j -= self.degrees[j]

            self.degrees.append(d)

        self.prev = price
        return self.degrees[-1]
解法三：单调栈
从规律中可以看出，优化时间复杂度的关键在于能否直接获取此前的跨度，并且还可以发现在利用跨度进行跳跃时，无需知道跳板之外的元素值，因此可以优化空间复杂度，即只保存跳板元素值和跳板的跨度。

举例来看，股票序列 [100, 80, 60, 70, 60, 75, 85]
对于75来说，跳板为 [(60, 1<跨度>), (70, 2<跨度>)]，如果还有跳板的话，那么跳板必然是会比70更大的，因此跳板的存储具有单调性。

对于85来说，跳板为 [(75, 4), (80, 1)]，其中(75, 4)是由此前的(75, 1),(60, 1), (70, 2)组合而成的，因此从结构上来说可以想到单调栈。

因此单调栈为单调递减栈，每个元素为<元素值，跨度>，每次调用一次next，就对应着单调栈的维护操作。

时间复杂度与解法二相同，为O(n)
空间复杂度为一个栈 O(n)


class StockSpanner:

    def __init__(self):
        self.stack = []

    def next(self, price: int) -> int:
        d = 1
        while len(self.stack) > 0 and price >= self.stack[-1][0]:
            d += self.stack.pop()[1]

        self.stack.append((price, d))
        return d


