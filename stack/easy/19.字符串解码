给定一个经过编码的字符串，返回它解码后的字符串。

编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。

你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。

此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。

 

示例 1：

输入：s = "3[a]2[bc]"
输出："aaabcbc"
示例 2：

输入：s = "3[a2[c]]"
输出："accaccacc"
示例 3：

输入：s = "2[abc]3[cd]ef"
输出："abcabccdcdcdef"
示例 4：

输入：s = "abc3[cd]xyz"
输出："abccdcdcdxyz"

C++
class Solution {
public:
    string decodeString(string s) {
        string res = "";
        string tmp = "";
        vector<string> st;
        int size = s.size();
        int i = 0;

        while(i < size){
            if(isdigit(s[i])){
                while(i<size && isdigit(s[i])) tmp += s[i++];
                st.push_back(tmp);
                tmp = "";
            }
            else if(isalpha(s[i]) || s[i] == '['){
                st.push_back(string(1,s[i++]));
            }
            else{
                vector<string> str;
                while(st.back() != "["){
                    str.push_back(st.back());
                    st.pop_back();
                }

                reverse(str.begin(),str.end());
                st.pop_back();

                int num = stoi(st.back());
                st.pop_back();

                for(auto sc : str){
                    tmp += sc;
                }

                while(num-- > 0) res += tmp;

                st.push_back(res);
                res = "";
                tmp = "";
                i++;
            }
        }

        for(auto stri : st){
            res += stri;
        }

        return res;
    }
};

C++
*****************************************************************
方法一：栈操作
思路和算法

本题中可能出现括号嵌套的情况，比如 2[a2[bc]]，这种情况下我们可以先转化成 2[abcbc]，在转化成 abcbcabcbc。我们可以把字母、数字和括号看成是独立的 TOKEN，并用栈来维护这些 TOKEN。具体的做法是，遍历这个栈：

如果当前的字符为数位，解析出一个数字（连续的多个数位）并进栈
如果当前的字符为字母或者左括号，直接进栈
如果当前的字符为右括号，开始出栈，一直到左括号出栈，出栈序列反转后拼接成一个字符串，此时取出栈顶的数字（此时栈顶一定是数字，想想为什么？），就是这个字符串应该出现的次数，我们根据这个次数和字符串构造出新的字符串并进栈
重复如上操作，最终将栈中的元素按照从栈底到栈顶的顺序拼接起来，就得到了答案。注意：这里可以用不定长数组来模拟栈操作，方便从栈底向栈顶遍历。

class Solution {
public:
    string getDigits(string &s, size_t &ptr) {
        string ret = "";
        while (isdigit(s[ptr])) {
            ret.push_back(s[ptr++]);
        }
        return ret;
    }

    string getString(vector <string> &v) {
        string ret;
        for (const auto &s: v) {
            ret += s;
        }
        return ret;
    }

    string decodeString(string s) {
        vector <string> stk;
        size_t ptr = 0;

        while (ptr < s.size()) {
            char cur = s[ptr];
            if (isdigit(cur)) {
                // 获取一个数字并进栈
                string digits = getDigits(s, ptr);
                stk.push_back(digits);
            } else if (isalpha(cur) || cur == '[') {
                // 获取一个字母并进栈
                stk.push_back(string(1, s[ptr++])); 
            } else {
                ++ptr;
                vector <string> sub;
                while (stk.back() != "[") {
                    sub.push_back(stk.back());
                    stk.pop_back();
                }
                reverse(sub.begin(), sub.end());
                // 左括号出栈
                stk.pop_back();
                // 此时栈顶为当前 sub 对应的字符串应该出现的次数
                int repTime = stoi(stk.back()); 
                stk.pop_back();
                string t, o = getString(sub);
                // 构造字符串
                while (repTime--) t += o; 
                // 将构造好的字符串入栈
                stk.push_back(t);
            }
        }

        return getString(stk);
    }
};

复杂度分析

时间复杂度：记解码后得出的字符串长度为 S，除了遍历一次原字符串 s，我们还需要将解码后的字符串中的每个字符都入栈，并最终拼接进答案中，故渐进时间复杂度为 O(S+∣s∣)，即 O(S)。
空间复杂度：记解码后得出的字符串长度为 S，这里用栈维护 TOKEN，栈的总大小最终与 S 相同，故渐进空间复杂度为 O(S)。


方法二：递归

思路和算法
我们也可以用递归来解决这个问题，从左向右解析字符串：

  如果当前位置为数字位，那么后面一定包含一个用方括号表示的字符串，即属于这种情况：k[...]：
    我们可以先解析出一个数字，然后解析到了左括号，递归向下解析后面的内容，遇到对应的右括号就返回，此时我们可以根据解析出的数字 x 解析出的括号里的字符串 s' 构造出一个新的字符串 x×s′；
    我们把 k[...] 解析结束后，再次调用递归函数，解析右括号右边的内容。
  如果当前位置是字母位，那么我们直接解析当前这个字母，然后递归向下解析这个字母后面的内容。
如果觉得这里讲的比较抽象，可以结合代码理解一下这个过程。

下面我们可以来讲讲这样做的依据，涉及到《编译原理》相关内容，感兴趣的同学可以参考阅读。 根据题目的定义，我们可以推导出这样的巴科斯范式（BNF）：

String→Digits[String]String∣AlphaString∣ϵ
Digits→DigitDigits∣Digit
Alpha→a∣⋯∣z∣A∣⋯∣Z
Digit→0∣⋯∣9

DigitDigit 表示十进制数位，可能的取值是 00 到 99 之间的整数
AlphaAlpha 表示字母，可能的取值是大小写字母的集合，共 5252 个
DigitDigit 表示一个整数，它的组成是 \rm DigitDigit 出现一次或多次
StringString 代表一个代解析的字符串，它可能有三种构成，如 BNF 所示
ϵ 表示空串，即没有任何子字符

由于 Digits 和 Alpha 构成简单，很容易进行词法分析，我们把它他们看作独立的 TOKEN。那么此时的非终结符有 String，终结符有 Digits、Alpha 和 ϵ，我们可以根据非终结符和 FOLLOW 集构造出这样的预测分析表：

            Alpha	                 Digits                   	ϵ
String	String→AlphaString	String→Digits[String]String	  String→ϵ
可见不含多重定义的项，为 LL(1) 文法，即：

从左向右分析（Left-to-right-parse）
最左推导（Leftmost-derivation）
超前查看一个符号（1-symbol lookahead）
它决定了我们从左向右遍历这个字符串，每次只判断当前最左边的一个字符的分析方法是正确的。

代码如下。

C++
class Solution {
public:
    string src; 
    size_t ptr;

    int getDigits() {
        int ret = 0;
        while (ptr < src.size() && isdigit(src[ptr])) {
            ret = ret * 10 + src[ptr++] - '0';
        }
        return ret;
    }

    string getString() {
        if (ptr == src.size() || src[ptr] == ']') {
            // String -> EPS
            return "";
        }

        char cur = src[ptr]; int repTime = 1;
        string ret;

        if (isdigit(cur)) {
            // String -> Digits [ String ] String
            // 解析 Digits
            repTime = getDigits(); 
            // 过滤左括号
            ++ptr;
            // 解析 String
            string str = getString(); 
            // 过滤右括号
            ++ptr;
            // 构造字符串
            while (repTime--) ret += str; 
        } else if (isalpha(cur)) {
            // String -> Char String
            // 解析 Char
            ret = string(1, src[ptr++]);
        }
        
        return ret + getString();
    }

    string decodeString(string s) {
        src = s;
        ptr = 0;
        return getString();
    }
};
复杂度分析

时间复杂度：记解码后得出的字符串长度为 S，除了遍历一次原字符串 s，我们还需要将解码后的字符串中的每个字符都拼接进答案中，故渐进时间复杂度为 O(S+∣s∣)，即 O(S)。
空间复杂度：若不考虑答案所占用的空间，那么就只剩递归使用栈空间的大小，这里栈空间的使用和递归树的深度成正比，最坏情况下为 O(|s|)，故渐进空间复杂度为 O(|s|)。

方法三
这题看到括号的匹配，首先应该想到的就是用栈来解决问题。

其次，读完题目，要我们类似于制作一个能使用分配律的计算器。想象：如3[a2[c]b] 使用一次分配律-> 3[accb] 再使用一次分配律->accbaccbaccb

class Solution {
public:
    string decodeString(string s) {
        string res = "";
        stack <int> nums;
        stack <string> strs;
        int num = 0;
        int len = s.size();
        for(int i = 0; i < len; ++ i)
        {
            if(s[i] >= '0' && s[i] <= '9')
            {
                num = num * 10 + s[i] - '0';
            }
            else if((s[i] >= 'a' && s[i] <= 'z') ||(s[i] >= 'A' && s[i] <= 'Z'))
            {
                res = res + s[i];
            }
            else if(s[i] == '[') //将‘[’前的数字压入nums栈内， 字母字符串压入strs栈内
            {
                nums.push(num);
                num = 0;
                strs.push(res); 
                res = "";
            }
            else //遇到‘]’时，操作与之相配的‘[’之间的字符，使用分配律
            {
                int times = nums.top();
                nums.pop();
                for(int j = 0; j < times; ++ j)
                    strs.top() += res;
                res = strs.top(); //之后若还是字母，就会直接加到res之后，因为它们是同一级的运算
                                  //若是左括号，res会被压入strs栈，作为上一层的运算
                strs.pop();
            }
        }
        return res;
    }
};

方法四
思路
其实可以采用分治的思想，解析外层括号之前，先解析内层括号。

当我们碰到左括号“[”时，先解析该括号中的字符串；
假如该字符串中存在左括号“[”,当碰到左括号"["时，重复上一步骤；假如该字符串中不存在“[”了，那么下一个碰到的一定是右括号“]”,当碰到右括号“]”,说明以上一个左括号“[”开头的字符到此结束，只需要记录该字符串然后再乘以“[”前的数字即可。

class Solution {
public:
string analysis(string s, int& index) {
    string res;
    int num = 0;
    string temp;
    while (index < s.size()) {
        if (s[index] >= '0' && s[index] <= '9') {
            num = 10 * num + s[index] - '0';
        }
        else if (s[index] == '[') {
            temp = analysis(s, ++index);//碰到'[',开始递归
            while(num-->0) res += temp;
            num = 0;//num置零
        }
        else if (s[index] == ']') break;//碰到']',结束递归
        else res += s[index];
        index++;
    }
    return res;
}
string decodeString(string s) {
    int index = 0;
    return analysis(s, index);
}
};

本来 while(num-->0) res += temp; 这句写的是for(int j = 0;j<num;j++) res += temp; 但是比较耗时，时间复杂度只超44%。换了之后直接双百AC了。


方法五

解题思路
此题的核心思路是: 要先思考：栈应存储什么元素，何时进栈、出栈


    以下用a2[b]举例子：
    1 当遇到'['，把'['和与之匹配的']'之间的字母需要重复的次数和'['之前的字符进栈，本例中进栈{2,a}
    2 当遇到']'，代码中的字符串res即：b,就是要重复的字母，此时出栈之前进栈的{2,a}，res变成a+2*b = abb
    3 部分注意事项看注释即可
代码

class Solution {
public:
    typedef pair<int,string> pis;
    //将字符串str重复times次
    string repeat(const string& str, int times) {
        string retString = "";
        for(int i = 0; i < times; ++i) retString += str;
        return retString;
    }
    //先思考：栈应存储什么元素，何时进栈、出栈
    string decodeString(string& s) {
        int repeatTims = 0;
        string res = "";
        vector<pis> vecStack;   //用vector代替stack，更高效，因为stack底层可以是vector
        for(auto i : s) {
            if('0'<=i && i<='9') repeatTims = (repeatTims*10)+(i-'0');  //计算字符串需要重复的次数
            else if(i == '[') {
                vecStack.push_back({repeatTims,res});
                //进栈后要更新res和repeatTimes，并不担心最后返回的res为空，因为之前更新的res在遇到'['又会被进栈
                //不懂这问题的可以手动模拟一下这个样例：3[a]2[bc]ef
                res = "";
                repeatTims = 0;
            }
            else if(i == ']') {
                pis tmp = vecStack[vecStack.size()-1];
                vecStack.pop_back();
                res = tmp.second + (tmp.first==0 ? "" : repeat(res, tmp.first));
            }
            else res += i;
        }
        return res;
    }
};

用栈去实现实质上是自己用栈去模拟递归的过程。



栈解法：


string decodeString(string s) {
    stack<int> numStack;
    stack<string> resStack;
    int num = 0;
    string res;
    for (int i = 0; i < s.size(); i++) {
        if (isalpha(s[i])) {
            res.push_back(s[i]);
        } else if (isdigit(s[i])) {
            num = num * 10 + s[i] - '0';
        } else if (s[i] == '[') {
            resStack.push(res);
            res = "";
            numStack.push(num);
            num = 0;
        } else {
            for (int j = 0; j < numStack.top(); j++) {
                resStack.top() += res;
            }
            numStack.pop();
            res = resStack.top();
            resStack.pop();
        }
    }
    return res;
}

递归解法（递归过程会重复扫描字符串，不推荐这种写法）：

string decodeString(string s) {
    int num = 0;
    string res;
    for (int i = 0; i < s.size(); i++) {
        if (isalpha(s[i])) {
            res.push_back(s[i]);
        } else if (isdigit(s[i])) {
            num = num * 10 + s[i] - '0';
        } else if (s[i] == '[') {
            int cnt = 0;
            i++;
            string innerS;
            while (s[i] != ']' || cnt != 0) {
                if (s[i] == '[') cnt++;
                else if (s[i] == ']') cnt--;
                innerS.push_back(s[i]);
                i++;
            }
            string innerRes = decodeString(innerS);
            while (num > 0) {
                res += innerRes;
                num--;
            }
        }
    }
    return res;
}

Java
******************************************************************

方法一：栈操作
class Solution {
    int ptr;

    public String decodeString(String s) {
        LinkedList<String> stk = new LinkedList<String>();
        ptr = 0;

        while (ptr < s.length()) {
            char cur = s.charAt(ptr);
            if (Character.isDigit(cur)) {
                // 获取一个数字并进栈
                String digits = getDigits(s);
                stk.addLast(digits);
            } else if (Character.isLetter(cur) || cur == '[') {
                // 获取一个字母并进栈
                stk.addLast(String.valueOf(s.charAt(ptr++))); 
            } else {
                ++ptr;
                LinkedList<String> sub = new LinkedList<String>();
                while (!"[".equals(stk.peekLast())) {
                    sub.addLast(stk.removeLast());
                }
                Collections.reverse(sub);
                // 左括号出栈
                stk.removeLast();
                // 此时栈顶为当前 sub 对应的字符串应该出现的次数
                int repTime = Integer.parseInt(stk.removeLast());
                StringBuffer t = new StringBuffer();
                String o = getString(sub);
                // 构造字符串
                while (repTime-- > 0) {
                    t.append(o);
                }
                // 将构造好的字符串入栈
                stk.addLast(t.toString());
            }
        }

        return getString(stk);
    }

    public String getDigits(String s) {
        StringBuffer ret = new StringBuffer();
        while (Character.isDigit(s.charAt(ptr))) {
            ret.append(s.charAt(ptr++));
        }
        return ret.toString();
    }

    public String getString(LinkedList<String> v) {
        StringBuffer ret = new StringBuffer();
        for (String s : v) {
            ret.append(s);
        }
        return ret.toString();
    }
}

方法二：递归
class Solution {
    String src;
    int ptr;

    public String decodeString(String s) {
        src = s;
        ptr = 0;
        return getString();
    }

    public String getString() {
        if (ptr == src.length() || src.charAt(ptr) == ']') {
            // String -> EPS
            return "";
        }

        char cur = src.charAt(ptr);
        int repTime = 1;
        String ret = "";

        if (Character.isDigit(cur)) {
            // String -> Digits [ String ] String
            // 解析 Digits
            repTime = getDigits(); 
            // 过滤左括号
            ++ptr;
            // 解析 String
            String str = getString(); 
            // 过滤右括号
            ++ptr;
            // 构造字符串
            while (repTime-- > 0) {
                ret += str;
            }
        } else if (Character.isLetter(cur)) {
            // String -> Char String
            // 解析 Char
            ret = String.valueOf(src.charAt(ptr++));
        }
        
        return ret + getString();
    }

    public int getDigits() {
        int ret = 0;
        while (ptr < src.length() && Character.isDigit(src.charAt(ptr))) {
            ret = ret * 10 + src.charAt(ptr++) - '0';
        }
        return ret;
    }
}

解法一：辅助栈法
本题难点在于括号内嵌套括号，需要从内向外生成与拼接字符串，这与栈的先入后出特性对应。

算法流程：

构建辅助栈 stack， 遍历字符串 s 中每个字符 c；
  当 c 为数字时，将数字字符转化为数字 multi，用于后续倍数计算；
  当 c 为字母时，在 res 尾部添加 c；
  当 c 为 [ 时，将当前 multi 和 res 入栈，并分别置空置 00：
    记录此 [ 前的临时结果 res 至栈，用于发现对应 ] 后的拼接操作；
    记录此 [ 前的倍数 multi 至栈，用于发现对应 ] 后，获取 multi × [...] 字符串。
    进入到新 [ 后，res 和 multi 重新记录。
  当 c 为 ] 时，stack 出栈，拼接字符串 res = last_res + cur_multi * res，其中:
    last_res是上个 [ 到当前 [ 的字符串，例如 "3[a2[c]]" 中的 a；
    cur_multi是当前 [ 到 ] 内字符串的重复倍数，例如 "3[a2[c]]" 中的 2。
返回字符串 res。
复杂度分析：

时间复杂度 O(N)，一次遍历 s；
空间复杂度 O(N)，辅助栈在极端情况下需要线性空间，例如 2[2[2[a]]]。

class Solution {
    public String decodeString(String s) {
        StringBuilder res = new StringBuilder();
        int multi = 0;
        LinkedList<Integer> stack_multi = new LinkedList<>();
        LinkedList<String> stack_res = new LinkedList<>();
        for(Character c : s.toCharArray()) {
            if(c == '[') {
                stack_multi.addLast(multi);
                stack_res.addLast(res.toString());
                multi = 0;
                res = new StringBuilder();
            }
            else if(c == ']') {
                StringBuilder tmp = new StringBuilder();
                int cur_multi = stack_multi.removeLast();
                for(int i = 0; i < cur_multi; i++) tmp.append(res);
                res = new StringBuilder(stack_res.removeLast() + tmp);
            }
            else if(c >= '0' && c <= '9') multi = multi * 10 + Integer.parseInt(c + "");
            else res.append(c);
        }
        return res.toString();
    }
}

解法二：递归法
总体思路与辅助栈法一致，不同点在于将 [ 和 ] 分别作为递归的开启与终止条件：

当 s[i] == ']' 时，返回当前括号内记录的 res 字符串与 ] 的索引 i （更新上层递归指针位置）；
当 s[i] == '[' 时，开启新一层递归，记录此 [...] 内字符串 tmp 和递归后的最新索引 i，并执行 res + multi * tmp 拼接字符串。
遍历完毕后返回 res。
复杂度分析：

时间复杂度 O(N)，递归会更新索引，因此实际上还是一次遍历 s；
空间复杂度 O(N)，极端情况下递归深度将会达到线性级别。

class Solution {
    public String decodeString(String s) {
        return dfs(s, 0)[0];
    }
    private String[] dfs(String s, int i) {
        StringBuilder res = new StringBuilder();
        int multi = 0;
        while(i < s.length()) {
            if(s.charAt(i) >= '0' && s.charAt(i) <= '9') 
                multi = multi * 10 + Integer.parseInt(String.valueOf(s.charAt(i))); 
            else if(s.charAt(i) == '[') {
                String[] tmp = dfs(s, i + 1);
                i = Integer.parseInt(tmp[0]);
                while(multi > 0) {
                    res.append(tmp[1]);
                    multi--;
                }
            }
            else if(s.charAt(i) == ']') 
                return new String[] { String.valueOf(i), res.toString() };
            else 
                res.append(String.valueOf(s.charAt(i)));
            i++;
        }
        return new String[] { res.toString() };
    } 
}

/**
 * 解法一
 *
 * 利用2个栈，一个数字栈numStack，一个字母栈strStack
 * 遍历字符串
 * 1、字符为数字，解析数字（注意连续数字的情况）存入 num
 * 2、字符为字母，拼接字母 存入 str
 * 3、字符为左括号，把之前得到的数字 num 和 字母 str 分别压栈，然后把数字重置为0，字母字符串重置为空串
 * 4、字符为右括号，数字栈栈顶数字出栈，作为重复次数 n，字母栈栈顶字母出栈，作为前缀字母字符串去拼接 str 字母变量，总共拼接 n 次，拼接后的新字母串给 str
 *
 * 例如：
 * 2[abc]3[cd]ef
 *  ↑
 * 遇到左括号，把数字 num=2 和 字母 str="" 入栈，并且 num 和 str 重置
 *    |   |      |    |
 *    |   |      |    |
 *    |_2_|      |_""_|
 *   numStack    strStack
 *
 * 2[abc]3[cd]ef
 *      ↑
 * 遇到左括号，num=0 str="abc"，numStack 和 strStack 栈顶元素出栈 str = strStack.pop() + str \* numStack.pop() = "" + "abc" * 2 =  "abcabc"
 *    |   |      |   |
 *    |   |      |   |
 *    |___|      |___|
 *   numStack    strStack
 *
 * 2[abc]3[cd]ef
 *        ↑
 * 遇到右括号，数字 num=3 和 字母 str="abcabc" 入栈，并且 num 和 str 重置
 *    |   |      |        |
 *    |   |      |        |
 *    |_3_|      |_abcabc_|
 *   numStack    strStack
 *
 * 2[abc]3[cd]ef
 *           ↑
 * 遇到左括号，num=0 str=cd，numStack 和 strStack 栈顶元素出栈 str = "abcabc" + "cd" * 3 = "abcabccdcdcd"
 *    |   |      |        |
 *    |   |      |        |
 *    |_3_|      |_abcabc_|
 *   numStack    strStack
 *
 * 遍历结束，最终结果 str="abcabccdcdcdef"
 */
class Solution1 {

    public String decodeString(String s) {
        //初始化
        LinkedList<Integer> numStack = new LinkedList();
        LinkedList<String> strStack = new LinkedList();
        StringBuilder sb = new StringBuilder();
        int num = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c >= '0' && c <= '9') {
                num = num * 10 + c - '0';
            } else if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
                sb.append(c);
            } else if (c == '[') {
                if (num > 0) numStack.push(num);
                strStack.push(sb.toString());
                sb = new StringBuilder();
                num = 0;
            } else {
                //c==']'
                StringBuilder preSB = new StringBuilder().append(strStack.pop());
                int times = numStack.pop();
                for (int j = 0; j < times; j++) {
                    preSB.append(sb);
                }
                sb = preSB;
            }
        }
        return sb.toString();
    }
}

Python
****************************************************************************
方法一：辅助栈法
本题难点在于括号内嵌套括号，需要从内向外生成与拼接字符串，这与栈的先入后出特性对应。

算法流程：

构建辅助栈 stack， 遍历字符串 s 中每个字符 c；
  当 c 为数字时，将数字字符转化为数字 multi，用于后续倍数计算；
  当 c 为字母时，在 res 尾部添加 c；
  当 c 为 [ 时，将当前 multi 和 res 入栈，并分别置空置 00：
    记录此 [ 前的临时结果 res 至栈，用于发现对应 ] 后的拼接操作；
    记录此 [ 前的倍数 multi 至栈，用于发现对应 ] 后，获取 multi × [...] 字符串。
    进入到新 [ 后，res 和 multi 重新记录。
  当 c 为 ] 时，stack 出栈，拼接字符串 res = last_res + cur_multi * res，其中:
    last_res是上个 [ 到当前 [ 的字符串，例如 "3[a2[c]]" 中的 a；
    cur_multi是当前 [ 到 ] 内字符串的重复倍数，例如 "3[a2[c]]" 中的 2。
返回字符串 res。
复杂度分析：

时间复杂度 O(N)，一次遍历 s；
空间复杂度 O(N)，辅助栈在极端情况下需要线性空间，例如 2[2[2[a]]]。
class Solution:
    def decodeString(self, s: str) -> str:
        stack, res, multi = [], "", 0
        for c in s:
            if c == '[':
                stack.append([multi, res])
                res, multi = "", 0
            elif c == ']':
                cur_multi, last_res = stack.pop()
                res = last_res + cur_multi * res
            elif '0' <= c <= '9':
                multi = multi * 10 + int(c)            
            else:
                res += c
        return res

解法二：递归法
总体思路与辅助栈法一致，不同点在于将 [ 和 ] 分别作为递归的开启与终止条件：

当 s[i] == ']' 时，返回当前括号内记录的 res 字符串与 ] 的索引 i （更新上层递归指针位置）；
当 s[i] == '[' 时，开启新一层递归，记录此 [...] 内字符串 tmp 和递归后的最新索引 i，并执行 res + multi * tmp 拼接字符串。
遍历完毕后返回 res。
复杂度分析：

时间复杂度 O(N)，递归会更新索引，因此实际上还是一次遍历 s；
空间复杂度 O(N)，极端情况下递归深度将会达到线性级别。

class Solution:
    def decodeString(self, s: str) -> str:
        def dfs(s, i):
            res, multi = "", 0
            while i < len(s):
                if '0' <= s[i] <= '9':
                    multi = multi * 10 + int(s[i])
                elif s[i] == '[':
                    i, tmp = dfs(s, i + 1)
                    res += multi * tmp
                    multi = 0
                elif s[i] == ']':
                    return i, res
                else:
                    res += s[i]
                i += 1
            return res
        return dfs(s,0)

方法三
正则regex 时间战胜81%

解题思路
大佬的思路，寻找所有的数字+[字母]格式的串，再替换，直到不存在需要解码的格式
没有使用递归，而前面的[[并不复合模式串，而且必须是数字连着[，
所以while m每次只会匹配最内层，所有的需要解码的部分，
最内层解码替换后就会变成纯字母，所以说又可以为外层做铺垫
若最内层出现同样的需要解码的串，有可能后面的串被前面的先替换了，细思，无妨
()是匹配并且保存匹配到的值
\d+表示一个或多个数字，尽可能多的匹配
同理\w+ 字母

缩行代码

class Solution:
    def decodeString(self,s:str)->str:
        while m:=re.compile(r'(\d+)\[(\w+)\]').findall(s):
            for num,char in m:s=s.replace(f'{num}[{char}]',char*int(num))
        return s
思路清晰的代码

class Solution:
    def decodeString(self,s:str)->str:
        pattern=re.compile(r'(\d+)\[(\w+)\]')
        m=pattern.findall(s) 
        while m:
            for num,char in m:
                s=s.replace(f'{num}[{char}]',char*int(num))
            m=pattern.findall(s)
        return s

方法四
解题思路
本题核心思路是在栈里面每次存储两个信息, (左括号前的字符串, 左括号前的数字), 比如abc3[def], 当遇到第一个左括号的时候，压入栈中的是("abc", 3), 然后遍历括号里面的字符串def, 当遇到右括号的时候, 从栈里面弹出一个元素(s1, n1), 得到新的字符串为s1+n1*"def", 也就是abcdefdefdef。对于括号里面嵌套的情况也是同样处理方式。
凡是遇到左括号就进行压栈处理，遇到右括号就弹出栈，栈中记录的元素很重要。
代码

class Solution:
    def decodeString(self, s: str) -> str:
        stack = []  # (str, int) 记录之前的字符串和括号外的上一个数字
        num = 0
        res = ""  # 实时记录当前可以提取出来的字符串
        for c in s:
            if c.isdigit():
                num = num * 10 + int(c)
            elif c == "[":
                stack.append((res, num))
                res, num = "", 0
            elif c == "]":
                top = stack.pop()
                res = top[0] + res * top[1]
            else:
                res += c
        return res


