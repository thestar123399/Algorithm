给定一个以字符串表示的非负整数 num，移除这个数中的 k 位数字，使得剩下的数字最小。

注意:

num 的长度小于 10002 且 ≥ k。
num 不会包含任何前导零。
示例 1 :

输入: num = "1432219", k = 3
输出: "1219"
解释: 移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219。
示例 2 :

输入: num = "10200", k = 1
输出: "200"
解释: 移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。
示例 3 :

输入: num = "10", k = 2
输出: "0"
解释: 从原数字移除所有的数字，剩余为空就是0。

C++
class Solution {
public:
    string removeKdigits(string num, int k) {
        string res;
        int n = num.size();
        int m = n-k;
        for(char c : num){
            while(k && res.size() && res.back() > c){
                res.pop_back();
                k--;
            }

            res.push_back(c);
        }

        res.resize(m);// k=num.size(),m=0

        while(!res.empty() && res[0] == '0'){
            res.erase(res.begin());
        }

        return res.empty() ? "0" : res;
    }
};

C++
*********************************************************************
方法一
思路：单调栈
维护一个递增栈，但当前元素小于栈顶元素，则移掉栈顶元素。

代码

class Solution {
public:
    string removeKdigits(string num, int k) {
        string res;
        int n = num.size(), m = n - k;        
        for (char c : num) {
            while (k && res.size() && res.back() > c) {
                res.pop_back();
                --k;
            }
            res.push_back(c);
        }
        res.resize(m);
        //去除前导0， 如10200，k = 1
        while (!res.empty() && res[0] == '0') {
            res.erase(res.begin());
        }
        return res.empty() ? "0" : res;
    }
};

方法二
************
解题思路
本题可以从三个方法去解题。
方法一：一般方法；
方法二：单调栈
方法三：（从string角度的）单调栈

代码
方法一：一般方法
这是我看到这道题的第一反应。
一开始，我以为只要将num中k个最大的数字逐一删去即可。
后来发现此思路行不通，因为这样无法保证剩余的数字按照原来的相对顺序生成最小的数字。
例如：num = 1432219, k=3时，得到的是1221 而不是最优的1219

正确的思路应该是在num中逐步选取最小的数字，以组成最小的数字。
而这里的重点，在于要在一定的范围内逐步选取最小的数字。（否则，上面的例子同样会得到错误的1221）

所以，可以这样理解：
在第一次循环中，num = 1432219, k=3，此时我们要删去k=3个数字，保留n-k=7-3=4个数字。
那么，可以将num = 1432219分为 num = 1432 219两部分（k+1个数字+n-k-1个数字），因为在前面的4个数字里面，至少要选择1个最小的数字（在选取最后3个保留的前提下）进行保留，所以此时start = 0, end = k。也就是要在[start,end]中选取一个最小的进行保留，返回最小数字的下标min_index。
而在下次循环中，start = min_index+1, end++ ，也就是在[start,end]中选择下一个最小的数字。以此类推，直至所有数字都选取完毕。

TIPS：用于提速的几种方法：

可以先将num中，下标小于等于k的0及前面的数字给移除。
例如：num = 12010, k = 2的时候，可以将前面的12给剔除掉，那后面的0也会被消掉。这样必然比其他消除方案得到的数字要小。因为消除了3位数（附送了一个0）。
当返回的下标min_index及后面的字符串的长度 = 还需要保留的字符串的长度的时候，直接返回。

int find_min(string num, int start, int end)//在[start,end]中找出最小的数字，返回下标
{
	int min = num[start];
	int min_index = start;
	for (int j = start; j <= end; j++)//找到第一个最小的字符
	{
		if (num[j] < min)
		{
			min = num[j];
			min_index = j;
		}
	}
	return min_index;
}
string removeKdigits(string num, int k) {
	int pos = num.find_first_of('0');//返回的是size_t,若果没找到，返回npos
	//可以先将num中，下标小于等于`k`的`0`及前面的数字给移除。
	while (pos != num.npos && pos <= k && k)
	{
		num = num.substr(pos + 1);
		k -= pos;
		pos = num.find_first_of('0');
	}
	if (k == 0)
		return num == "" ? "0" : num;
	if (k >= num.size())
		return "0";
	string result;
	int start = 0;
	int end = k ;
	while (result.size() < num.size() - k)
	{
		int min_index = find_min(num, start, end);
		//当返回的下标`min_index`及后面的字符串的长度 = 还需要保留的字符串的长度的时候，直接返回:
		if (num.size() - k == num.size() - min_index + result.size())
			return result + num.substr(min_index);
		result += num.substr(min_index, 1);
		start = min_index + 1;
		end++;
	}
	if (result == "")
		result = "0";
	return result;
	
}

方法二：用stack实现的单调栈

在看了其他大佬的题解之后，发现此题可以用单调栈来解决！！（就是想不到啊...）
经过思考，我理解了可以使用单调栈的思路：
比较a和b的大小，是从最高位开始进行比较的。
那么，我们也应该是从最高位开始进行删数。所以，就是对num进行单调上升栈的维护。
逐个数字入栈，当发现当前入栈元素<栈顶元素s.top()的时候，就s.pop()，维护栈的单调递增性。
这样就可以保证，结果的最高位最小，并以此递增。
TIPS：

当所有元素都进行过栈的处理之后，如果结果stack中的元素比要保留的长度要长的话，则把栈顶元素pop掉。
在入栈的时候，可忽略掉前置0.
string removeKdigits(string num, int k) {
	stack<char> s;
	for (int i = 0; i < num.size(); i++)
	{
		while (!s.empty() && s.top() > num[i] && k)
		{
			s.pop();
			k--;
		}
		if (s.empty() && num[i] == '0')
			continue;//跳过前置0
		s.push(num[i]);
	}
	string result;
	while (!s.empty())
	{
		if (k > 0)//当还要再移除数字的时候：从此时单调递增栈的top部删去数字
			k--;
		else if (k == 0)//当不用再移除数字的时候：把字符串取出来到result
			result += s.top();

		s.pop();	
	}
	reverse(result.begin(), result.end());//stl中的reverse函数
	return result == "" ? "0" : result;
}

方法三：用string实现的单调栈
本方法是方法二的优化。即不用初始化一个栈，而是直接用string来实现栈的功能：维护单调上升的序列。
这样可以降低时间复杂度！！（因为不需要把字符从栈里面取出来，并进行reverse）

class Solution {
public:
string removeKdigits(string num, int k)
{
	string result;
	for (int i = 0; i < num.size(); i++)
	{
		while (result.size() && k&&result.back() > num[i])
		{
			result.pop_back();
			k--;
		}
		if (result.size() == 0 && num[i] == '0')
			continue;
		result+=num[i];
	}
    while (k > 0 && !result.empty())
	{
		result.pop_back();
		k--;
	}
	return result == "" ? "0" : result;
}
};

方法三
贪心+用vector 模拟栈
class Solution {
public:
    string removeKdigits(string num, int k) {
        std::vector<int> s;
        std::string result="";
        for(int i=0;i<num.length();i++){
            int number = num[i]-'0';
            while(s.size()!=0 && number<s[s.size()-1]&&k>0){
                s.pop_back();
                k--;
            }
            if(number!=0||s.size()!=0) s.push_back(number);
        }
        while(s.size()!=0 &&k>0){
            s.pop_back();
            k--;
        }
        for(int i=0;i<s.size();i++){
            result.append(1,'0'+s[i]);
        }
        if(result == "") return "0";
        return result;
    }
};

方法四
依次去除比最高位大的k个数字。


class Solution {
public:
    string removeKdigits(string num, int k) {
        vector<int>nums;
        string res = "";
        for(int i = 0; i < num.length(); ++ i){
            int number = num[i] - '0';
            while(nums.size() != 0 && k > 0 && nums.back() > number){
                nums.pop_back();
                k --;
            }
            if(nums.size() > 0 || number != 0) nums.push_back(number);
        }
        while(nums.size() != 0 && k > 0){
            nums.pop_back();
            k --;
        }
        for(auto num:nums) res += '0' + num;

        if(res == "") res = "0";

        return res;
    }
};

Java
****************************************************************
方法一：暴力法 [超出时间限制]
我们最容易想到的是列举所有可能的组合，并找出其中最小的数字，即暴力法。

经过了一会儿的思考，我们很快就会排除这种方法，主要原因是：我们从 N 个数字中选择 K 个数字的组合，将具有指数的时间复杂度，即 (Cn)^k，即使是测试用例也可能超出时间限制。

除了复杂性问题之外，在暴力法中需要解决的另一个问题是比较两个数字串的值。我们可以将数字字符串转换为数值，但是这种方法是具有局限性的。对于一个无符号的 32 位整数，它所能容纳的最大值是一个具有 10 位数字（即 4294967295）。但是很多测试用例是由数百位数字组成的。

我们可以不将字符串转为整数，只需要从左到右逐个比较数字序列就可以了。

但是，这个问题应该有某种方法来构造答案，而不是列举所有可能的组合。

方法二：利用栈的贪心算法
对于两个相同长度的数字序列，最左边不同的数字决定了这两个数字的大小，例如，对于 A = 1axxx，B = 1bxxx，如果 a > b 则 A > B。

知道了这个以后，我们可以想到，在删除数字时应该从左向右迭代。

确定了迭代的顺序以后，就必须制定如何消除数字的标准，以便获得最小值。



让我们从一个简单的例子开始。给定一个数字序列，例如 425，如果要求我们只删除一个数字，那么从左到右，我们有 4、2 和 5 三个选择。我们将每一个数字和它的左邻居进行比较。从 2 开始，小于它的左邻居 4。则我们应该去掉数字 4。如果不这么做，则随后无论做什么，都不会得到最小数。

如果我们保留数字 4，那么所有可能的组合都是以数字 4（即 42，45）开头的。相反，如果去掉 4，留下 2，我们得到的是以 2 开头的组合（即 25），这明显小于任何留下数字 4 的组合。

我们可以总结上述删除一个数字的规则，如下：
给定一个数字序列[D1D2D3…Dn]，如果数字D2小于其左邻居D1，则我们应该删除左邻居（D1），以获得最小结果。

算法：

上述的规则使得我们通过一个接一个的删除数字，逐步的接近最优解。

这个问题可以用贪心算法来解决。上述规则阐明了我们如何接近最终答案的基本逻辑。一旦我们从序列中删除一个数字，剩下的数字就形成了一个新的问题，我们可以继续使用这个规则。

我们会注意到，在某些情况下，规则对任意数字都不适用，即单调递增序列。在这种情况下，我们只需要删除末尾的数字来获得最小数。

我们可以利用栈来实现上述算法，存储当前迭代数字之前的数字。

对于每个数字，如果该数字小于栈顶部，即该数字的左邻居，则弹出堆栈，即删除左邻居。否则，我们把数字推到栈上。
我们重复上述步骤（1），直到任何条件不再适用，例如堆栈为空（不再保留数字）。或者我们已经删除了 k 位数字。


我们在上图中演示了该算法的工作原理。给定输入序列 [1，2，3，4，5，2，6，4] 和 k=4，规则在 5 触发。删除数字 5 后，规则将在数字 4 处再次触发，直到数字 3。然后，在数字 6 处，规则也被触发。

在上述主循环之外，我们需要处理一些情况，以使解决方案更加完整：

当我们离开主循环时，我们删除了 m 个数字，这比要求的要少，即（m<k）。在极端情况下，我们不会删除循环中单调递增序列的任何数字，即 m==0。在这种情况下，我们只需要从序列尾部删除额外的 k-m 个数字。
一旦我们从序列中删除 k 位数字，可能还有一些前导零。要格式化最后的数字，我们需要去掉前导零。
我们最终可能会从序列中删除所有的数字。在这种情况下，我们应该返回零，而不是空字符串。
class Solution {
  public String removeKdigits(String num, int k) {
    LinkedList<Character> stack = new LinkedList<Character>();
        
    for(char digit : num.toCharArray()) {
      while(stack.size() > 0 && k > 0 && stack.peekLast() > digit) {
        stack.removeLast();
        k -= 1;
      }
      stack.addLast(digit);
    }
        
    /* remove the remaining digits from the tail. */
    for(int i=0; i<k; ++i) {
      stack.removeLast();
    }
        
    // build the final string, while removing the leading zeros.
    StringBuilder ret = new StringBuilder();
    boolean leadingZero = true;
    for(char digit: stack) {
      if(leadingZero && digit == '0') continue;
      leadingZero = false;
      ret.append(digit);
    }
        
    /* return the final string  */
    if (ret.length() == 0) return "0";
    return ret.toString();
  }
}

复杂度分析

时间复杂度：O(N)。尽管存在嵌套循环，但内部循环最多只能运行 k 次。由于 0<k≤N，主循环的时间复杂度被限制在 2N 以内。对于主循环之外的逻辑，它们的时间复杂度是 O(N)。总时间复杂度为 O(N)。
空间复杂度：O(N)，在最坏的情况下栈存储了所有的数字。

方法三
贪心算法基础指南之移掉K位数字

证明过程，官方讲的很详细了，大体的结论是移除相邻的逆的降序对的左侧字符，不断重复这个过程

给出几个典型的case


"1234567890" k=9
"100204"     k =1
"10"         k=1

方法1:Stack
    public String removeKdigits(String num, int k) {
        //初始化一个stack
        Stack<Character> stack = new Stack<>();
        for (char c : num.toCharArray()) {
            //当栈顶的元素大于即将要加入栈的元素，弹出栈顶元素（要在k不为0的前提下）
            while (!stack.isEmpty() && stack.peek() > c && k > 0) {
                stack.pop();
                k--;
            }
            stack.push(c);
        }
        //再次判断k是否为0，不为0的话，说明还有栈顶的元素需要被弹出
        while (k > 0) {
            stack.pop();
            k--;
        }
        //弹出栈内所有元素，装进sb中，这时的sb是逆序的，下面的变量过程中需要reverse
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) sb.append(stack.pop());
        StringBuilder res = new StringBuilder();
        boolean headZero = true;//移除的是100204这个case中的前两个0的这种情况，204之间的0不需要被移除（k=1）
        for (char c : sb.reverse().toString().toCharArray()) {
            if (c == '0' && headZero) {
                continue;
            }
            res.append(c);
            headZero = false;
        }
        //再次判断下是否没有元素了
        return res.toString().equals("") ? "0" : res.toString();
    }

方法2:LinkedList
    public String removeKdigits(String num, int k) {
        //维护一个list，不像stack，其可以首尾操作
        LinkedList<Character> list = new LinkedList<>();
        for (char c : num.toCharArray()) {
            while (!list.isEmpty() && list.peekLast() > c && k > 0) {
                list.removeLast();
                k--;
            }
            list.addLast(c);
        }
        while (k > 0) {
            list.removeLast();
            k--;
        }
        StringBuilder res = new StringBuilder();
        boolean headZero = true;
        for (char c : list) {
            if (c == '0' && headZero) continue;
            res.append(c);
            headZero = false;
        }
        return res.toString().equals("") ? "0" : res.toString();
    }

方法3:String
采用的String进行截取操作，效率嘛，感人
    public String removeKdigits(String num, int k) {
        String res = "";
        for (char c : num.toCharArray()) {
            while (!res.equals("") && res.charAt(res.length() - 1) > c && k > 0) {
                res = res.substring(0, res.length() - 1);
                k--;
            }
            res += c;
        }
        while (k > 0) {
            res = res.substring(0, res.length() - 1);
            k--;
        }
        int i = 0;
        while (i < res.length() && res.charAt(i) == '0') i++;
        if (i == res.length()) return "0";
        return res.substring(i);
    }

方法四
移除中位数
一、解题思路：

1、为了寻求一般解，我先代入了几组数据，试图寻找求解规律。
下图为当k=1，k=2，k=3时，移除哪k个数能使剩下的值最小。


2、（运气不错）我们从左往右比较，当 [i]>[i+1] 那就说明这个数（[i]）需要移除，这就是我们想要的规律。

3、当然，还有不可忽视的临界情况。

二、算法实现及思路解析（先看有注释的部分）

       	char[] str = num.toCharArray();//首先，我们将num转化成字符数组
    	int length = num.length();	//用length去记录移除k个数后返回字符串的长度。
	//也许你会有疑问“返回的字符串长度不就是 num.length - k 吗？”
    	
    	if(k==0)
    	{
    		return num;
    	}
    	
    	if(k==num.length())
    	{
    		return "0";
    	}
    	
    	while(k!=0)//核心部分,删除k个数，理论上循环k次。
    	{
    		int i;
    		int flag = 1;
    		for(i = 0; i < str.length - 1; i++)//从左往右
    		{
    			if((int)str[i]>(int)str[i+1])//左边比右边大
    			{
    				for(int t = i; t < str.length - 1; t++)
    				{//这个循环代表，删除数组中的一个元素。
    					str[t] = str[t+1];
    				}
    				flag = 0;
    				length--;//删除之后，返回的长度-1，k-1，跳出for循环
    				k--;
    				break;
    			}
    		}
			if(flag == 1 && k!=0)//如果找了一圈没有任何移除，即flag为1，但k有余量时
			{			
				length--;	//那说明最后一个>=倒数第二个		
				k--;	//所以length--，k--.（length--相当于删除了。。。往下看）
			}
    	}
    	
    	boolean cut = true;
    	while(cut)
    	{
    		cut = false;
    		if(str[0]=='0'&&length!=1)
    		{
    			cut = true;
    			for(int t = 0; t < str.length - 1 ; t++)
    			{
    				str[t] = str[t+1];
    			}
    			length--;
    		}
    		
    	}
    	 	
    	char[] pre = new char[length];//建立一个新数组,去记录0到length-1
    	for(int i = 0; i < length; i++)//这也就是为什么上面length--相当于删除的原因了
    	{	
    		pre[i] = str[i];
    	}

	return String.valueOf(pre);//返回这个新的数组

三、临界情况分析：
    	if(k==0)//k为0就是什么都不删除
    	{
    		return num;
    	}

	
	```
	示例3：
	输入: num = "10", k = 2
	输出: "0"
	解释: 从原数字移除所有的数字，剩余为空就是0。
	```
    	if(k==num.length())//正如示例:3所示，当刚好删除完的时候，不是返回“空”，而是“0”;
    	{
    		return "0";
    	}
    	
	```
	示例 2 :

	输入: num = "10200", k = 1
	输出: "200"
	解释: 移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。
	```
	boolean cut = true;//正如示例2所示，不能有任何的前缀0.
	while(cut)
	{
		cut = false;//如果接下来没有发生前缀为0，也就不必再判断前缀是否为0.
		if(str[0]=='0'&&length!=1)//第二个条件针对“num=10，k=1”这类情况。
		{
			cut = true;//但如果发生了前缀为0，那么我们还需要再次循环。例如（num=700200003，k=2这类情况.
			for(int t = 0; t < str.length - 1 ; t++)
			{
				str[t] = str[t+1];
			}
			length--;
		}	
	}

方法五
单调队列/双指针
总体思路：比较相邻两者
若前小，则保留
若前大，则移除
实现思路：单调栈（一般可用 栈、队列、双端队列、双指针 实现）
实现步骤
定义单调栈结构（保证单调递增，非严格），用于存储最终结果
遍历字符串，逐个入栈
若新来的比栈顶小，则栈顶出栈 (有人比你年轻，你老得走了)
出栈相当于移除动作，需次数并与 k 比较，别删多了
k 还有余
怎么会还有剩呢？因为上文步骤只是把大的数移走，相等的数都入栈了
从后面的删起
移除头部零（双端队列香不香）有 '0'
全空，return "0";
构建字符串，顺序返回整个单调栈元素（双端队列好香）
复杂度分析
时间复杂度 O(n)O(n)
空间复杂度 O(n)O(n)
方法一：单调队列

public String removeKdigits(String num, int k) {
    Deque<Character> deque = new LinkedList<>(); // asc
    char[] arr = num.toCharArray();

    // 遍历，逐个入队
    for (char c : arr) {
        while (!deque.isEmpty() && k > 0 && deque.getLast() > c) {
            k--;
            deque.removeLast();
        }
        deque.addLast(c);
    }

    // k 还有余，后面大的删起
    while (k-- > 0 && !deque.isEmpty()) deque.removeLast();
    
    // 移除头部零
    while (!deque.isEmpty() && deque.getFirst() == '0')
        deque.removeFirst();
    if (deque.isEmpty()) return "0";

    // 构建，返回
    char[] res = new char[deque.size()];
    for (int i = 0; i < res.length; i++) {
        res[i] = deque.removeFirst();
    }
    return new String(res);
}
方法二：双指针
步骤与双端队列完全相同
提前构造最长 n 的字符数组
维护双指针模拟头/尾的出/入队操作

public String removeKdigits(String num, int k) {
    int r = 0, n = num.length();
    char[] res = new char[n];

    // 遍历，逐个入数组
    for (char c : num.toCharArray()) {
        while (r > 0 && k > 0 && res[r - 1] > c) {
            k--;
            r--;
        }
        res[r++] = c;
    }

    // k 还有余，后面大的删起
    while (k-- > 0 && r > 0) r--;

    // 移除头部零
    int l = 0; // 此时才需要 left 指针
    while (l < r && res[l] == '0') l++;
    if (l == r) return "0";

    // 构建，返回
    return new String(res, l, r - l);
}

方法六
贪心算法，数据结构：单调栈
class Solution {
    //10 ms, 在所有 Java 提交中击败了83.60%的用户
    
    //思想：贪心，让较小的数在高位，优先从最高为开始考虑
    //数据结构：单调栈，压栈规则，如果比当前元素小，就向外弹；如果比当前元素大，就直接压
    public String removeKdigits(String num, int k) {
        if(k >= num.length()){
            return "0";
        }
        
        int n = num.length();
        Stack<Integer> stack = new Stack<>();
        int i = 0;
        for( ; i < n; i++){
            
            //如果k次数已经用完，说明，不可以再移掉数了，剩下的直接substring就可以了
            //这样效率会提高很多
            if(k == 0){
                break;
            }
            
            int val = num.charAt(i) - '0';
            
            //添加自己之前要把比自己小的全pop()出来
            while(!stack.isEmpty() && val < stack.peek() && k > 0){
                stack.pop();
                k--;
            }  

            //如果栈为空，并且自己是0的话不允许添加
            if(!stack.isEmpty() || val != 0){
                    stack.push(val);
            }
            
            
        }
        
        //这是因为在k还没有用完的情况下，遇到的剩下的序列全是递增的，则需要从后向前删除
        while(k > 0){
            stack.pop();
            k--;
        }
        
        StringBuilder str = new StringBuilder();
        while(!stack.isEmpty()){//添加的时候要从头部添加，否则就是逆序的
            str.insert(0,String.valueOf(stack.pop()));
        }
        if(i < num.length()){//说明循环是从break出来的，那么就可以substring()
            str.append(num.substring(i));
        }
        //这是因为 (10 , 1)这样的类似案例
        return str.length() == 0 ? "0" : str.toString();
        
    }
}

Python
*********************************************************************
方法一 利用栈的贪心算法
class Solution:
    def removeKdigits(self, num: str, k: int) -> str:
        numStack = []
        
        # Construct a monotone increasing sequence of digits
        for digit in num:
            while k and numStack and numStack[-1] > digit:
                numStack.pop()
                k -= 1
        
            numStack.append(digit)
        
        # - Trunk the remaining K digits at the end
        # - in the case k==0: return the entire list
        finalStack = numStack[:-k] if k else numStack
        
        # trip the leading zeros
        return "".join(finalStack).lstrip('0') or "0"

方法二
首先是左右的问题，从右边考虑的话就算删除再多的9也不如左边一个1实在，也就是1000>999
所以从左考虑
再有就是删除规则是不看位数而看递增递减，4256000删除2和4减少的不是2--105 4--106，因为k是一样的最后删除的影响其实跟这个数字本来所在的位数无关
贪心规则：总是删除一个递减序列中较大的，也就是4256000 如果k允许应该先删4 --256000 -- 25000 -- 2000 - 0
代码就是官方题解的意思，我的是模拟的没加栈就不上了


class Solution:
    def removeKdigits(self, num: str, k: int) -> str:
        numStack = []
        #k的条件下过一遍数组 维持单调递增栈
        for digit in num:
            while k and numStack and numStack[-1] > digit:
                numStack.pop()
                k -= 1
        
            numStack.append(digit)
        #剩下的k次用完
        finalStack = numStack[:-k] if k else numStack

        return "".join(finalStack).lstrip('0') or "0"

方法三
我们从一个简单的问题入手，识别一下这种题的基本形式和套路，为之后的三道题打基础。

题目描述

给定一个以字符串表示的非负整数  num，移除这个数中的 k 位数字，使得剩下的数字最小。

注意:

num 的长度小于 10002 且  ≥ k。
num 不会包含任何前导零。


示例 1 :

输入: num = "1432219", k = 3
输出: "1219"
解释: 移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219。
示例 2 :

输入: num = "10200", k = 1
输出: "200"
解释: 移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。
示例 3 :

输入: num = "10", k = 2
输出: "0"
解释: 从原数字移除所有的数字，剩余为空就是 0。

前置知识
数学
思路
这道题让我们从一个字符串数字中删除 k 个数字，使得剩下的数最小。也就说，我们要保持原来的数字的相对位置不变。

以题目中的 num = 1432219， k = 3 为例，我们需要返回一个长度为 4 的字符串，问题在于： 我们怎么才能求出这四个位置依次是什么呢？



（图 1）

暴力法的话，我们需要枚举C_n^(n - k) 种序列（其中 n 为数字长度），并逐个比较最大。这个时间复杂度是指数级别的，必须进行优化。

一个思路是：

从左到右遍历
对于每一个遍历到的元素，我们决定是丢弃还是保留
问题的关键是：我们怎么知道，一个元素是应该保留还是丢弃呢？

这里有一个前置知识：对于两个数 123a456 和 123b456，如果 a > b， 那么数字 123a456 大于 数字 123b456，否则数字 123a456 小于等于数字 123b456。也就说，两个相同位数的数字大小关系取决于第一个不同的数的大小。

因此我们的思路就是：

从左到右遍历
对于遍历到的元素，我们选择保留。
但是我们可以选择性丢弃前面相邻的元素。
丢弃与否的依据如上面的前置知识中阐述中的方法。
以题目中的 num = 1432219， k = 3 为例的图解过程如下：



（图 2）

由于没有左侧相邻元素，因此没办法丢弃。



（图 3）

由于 4 比左侧相邻的 1 大。如果选择丢弃左侧的 1，那么会使得剩下的数字更大（开头的数从 1 变成了 4）。因此我们仍然选择不丢弃。



（图 4）

由于 3 比左侧相邻的 4 小。 如果选择丢弃左侧的 4，那么会使得剩下的数字更小（开头的数从 4 变成了 3）。因此我们选择丢弃。

。。。

后面的思路类似，我就不继续分析啦。

然而需要注意的是，如果给定的数字是一个单调递增的数字，那么我们的算法会永远选择不丢弃。这个题目中要求的，我们要永远确保丢弃 k 个矛盾。

一个简单的思路就是：

每次丢弃一次，k 减去 1。当 k 减到 0 ，我们可以提前终止遍历。
而当遍历完成，如果 k 仍然大于 0。不妨假设最终还剩下 x 个需要丢弃，那么我们需要选择删除末尾 x 个元素。
上面的思路可行，但是稍显复杂。


（图 5）

我们需要把思路逆转过来。刚才我的关注点一直是丢弃，题目要求我们丢弃 k 个。反过来说，不就是让我们保留 n - kn−k 个元素么？其中 n 为数字长度。 那么我们只需要按照上面的方法遍历完成之后，再截取前n - k个元素即可。

按照上面的思路，我们来选择数据结构。由于我们需要保留和丢弃相邻的元素，因此使用栈这种在一端进行添加和删除的数据结构是再合适不过了，我们来看下代码实现。

代码（Python）
链接：https://leetcode-cn.com/problems/remove-k-digits/solution/yi-zhao-chi-bian-li-kou-si-dao-ti-ma-ma-zai-ye-b-5/

class Solution(object):
    def removeKdigits(self, num, k):
        stack = []
        remain = len(num) - k
        for digit in num:
            while k and stack and stack[-1] > digit:
                stack.pop()
                k -= 1
            stack.append(digit)
        return ''.join(stack[:remain]).lstrip('0') or '0'

复杂度分析

时间复杂度：虽然内层还有一个 while 循环，但是由于每个数字最多仅会入栈出栈一次，因此时间复杂度仍然为 O(N)，其中 N 为数字长度。
空间复杂度：我们使用了额外的栈来存储数字，因此空间复杂度为 O(N)，其中 N 为数字长度。
提示： 如果题目改成求删除 k 个字符之后的最大数，我们只需要将 stack[-1] > digit 中的大于号改成小于号即可。

或者
计数法+单调栈
解题思路
保证num尽可能地偏向升序状态，如果k没有用完，num已达到升序状态，那么从尾部再pop余下的k个元素即可，注意排除前导0

代码

class Solution:
    def removeKdigits(self, num: str, k: int) -> str:
        stack = []
        for i in num:
            while k and stack and stack[-1] > i:
                stack.pop()
                k -= 1
            stack.append(i)

        while k > 0:
            stack.pop()
            k -= 1

        index = -1
        for l in range(len(stack)):
            if stack[l] != '0':
                index = l
                break
        if index == -1:
            return '0'
        else:
            return ''.join(stack[index:])
代码优化(内置函数lstrip的应用)

class Solution:
    def removeKdigits(self, num: str, k: int) -> str:
        stack = []
        for i in num:
            while k and stack and stack[-1] > i:
                stack.pop()
                k -= 1
            stack.append(i)

        while k > 0:
            stack.pop()
            k -= 1

        return ''.join(stack).lstrip('0') or '0'
复杂度分析
时间复杂度：O(N)
空间复杂度：O(N)


