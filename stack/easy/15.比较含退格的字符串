给定 S 和 T 两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。 # 代表退格字符。

注意：如果对空文本输入退格字符，文本继续为空。

 

示例 1：

输入：S = "ab#c", T = "ad#c"
输出：true
解释：S 和 T 都会变成 “ac”。
示例 2：

输入：S = "ab##", T = "c#d#"
输出：true
解释：S 和 T 都会变成 “”。
示例 3：

输入：S = "a##c", T = "#a#c"
输出：true
解释：S 和 T 都会变成 “c”。
示例 4：

输入：S = "a#c", T = "b"
输出：false
解释：S 会变成 “c”，但 T 仍然是 “b”。
 

提示：

1 <= S.length <= 200
1 <= T.length <= 200
S 和 T 只含有小写字母以及字符 '#'。
 

进阶：

你可以用 O(N) 的时间复杂度和 O(1) 的空间复杂度解决该问题吗？

C++
class Solution {
public:
    bool backspaceCompare(string S, string T) {
        if(getResult(S) == getResult(T)) return true;
         return false;
    }
private:
    string getResult(string str){
        int size = str.size();
        stack<string> st;
        stack<string> temp;

        for(int i = 0; i < size; i++){
            // *****
            if(!st.empty() && str[i] == '#'){
                st.pop();
                continue;
            }
            else if(st.empty() && str[i] == '#'){
                continue;
            }
            
            // *****
            string tmp(1,str[i]);

            st.push(tmp);
        }

        while(!st.empty()){
            temp.push(st.top());
            st.pop();
        }

        string res = ""; 
        while(!temp.empty()){
            res += temp.top();
            temp.pop();
        }

        return res;
    }
};


C++
*************************************************************
方法一
class Solution {
public:
    bool backspaceCompare(string S, string T)
    {
        string stack1 = "", stack2 = "";
        for (auto s : S)
            if (s == '#' && stack1 != "")
                stack1.pop_back();
            else if (s != '#') stack1.push_back(s);
        for (auto t : T)
            if (t == '#' && stack2 != "")
                stack2.pop_back();
            else if (t != '#') stack2.push_back(t);
        return stack1 == stack2;
    }
};

方法二

class Solution {
public:
    string getString(string S){
        //储存结果
        string l;
        //参数的长度
        int len = S.length();
        //记录字母的个数
        int count = 0;
        //遍历参数
        for(int i = 0; i < len; i++){
            //把参数中的字母都放到储存结果中
            if(S[i] != '#'){
                l += S[i];
                //记录字母个数
                count ++;
            }
            else{
                //判断有没有足够的字母去消除
                if(count != 0){
                    l.erase(l.end()-1);
                    count--;
                }
            }
        }
        return l;
    }
    bool backspaceCompare(string S, string T) {
        return getString(S) == getString(T);
    }
};

Java
*********************************************************
方法一：重构字符串【通过】
思想

使用 build(S) 和 build(T) 构造去除了退格符和被删除字符后的字符串，然后比较它们是否相等。

算法

在 build(S) 中，使用栈存储每次输入的字符。

Java

class Solution {
    public boolean backspaceCompare(String S, String T) {
        return build(S).equals(build(T));
    }

    public String build(String S) {
        Stack<Character> ans = new Stack();
        for (char c: S.toCharArray()) {
            if (c != '#')
                ans.push(c);
            else if (!ans.empty())
                ans.pop();
        }
        return String.valueOf(ans);
    }
}
复杂度分析

时间复杂度：O(M + N)，其中 M, N 是字符串 S 和 T 的长度。

空间复杂度：O(M + N)。

方法二：双指针【通过】
思路

一个字符是否属于最终字符串的一部分，取决于它后面有多少个退格符。

如果反向遍历字符串，就可以先知道有多少个退格符，然后知道退格符左边有多少个字符会被删除，对应的也就知道哪些字符会保留在最终的字符串中。

算法

反向遍历字符串，如果遍历到一个退格符，那么再往左第一个非退格字符将会被删除，剩余未被删除的字符就是最终的字符串。

Java

class Solution {
    public boolean backspaceCompare(String S, String T) {
        int i = S.length() - 1, j = T.length() - 1;
        int skipS = 0, skipT = 0;

        while (i >= 0 || j >= 0) { // While there may be chars in build(S) or build (T)
            while (i >= 0) { // Find position of next possible char in build(S)
                if (S.charAt(i) == '#') {skipS++; i--;}
                else if (skipS > 0) {skipS--; i--;}
                else break;
            }
            while (j >= 0) { // Find position of next possible char in build(T)
                if (T.charAt(j) == '#') {skipT++; j--;}
                else if (skipT > 0) {skipT--; j--;}
                else break;
            }
            // If two actual characters are different
            if (i >= 0 && j >= 0 && S.charAt(i) != T.charAt(j))
                return false;
            // If expecting to compare char vs nothing
            if ((i >= 0) != (j >= 0))
                return false;
            i--; j--;
        }
        return true;
    }
}
复杂度分析

时间复杂度：O(M + N)，其中 M, N 是字符串 S 和 T 的长度。

空间复杂度：O(1)。

Python
********************************************************
方法一：重构字符串【通过】
思想

使用 build(S) 和 build(T) 构造去除了退格符和被删除字符后的字符串，然后比较它们是否相等。

算法

在 build(S) 中，使用栈存储每次输入的字符。

JavaPython

class Solution(object):
    def backspaceCompare(self, S, T):
        def build(S):
            ans = []
            for c in S:
                if c != '#':
                    ans.append(c)
                elif ans:
                    ans.pop()
            return "".join(ans)
        return build(S) == build(T)
复杂度分析

时间复杂度：O(M + N)，其中 M, N 是字符串 S 和 T 的长度。

空间复杂度：O(M + N)。

方法二：双指针【通过】
思路

一个字符是否属于最终字符串的一部分，取决于它后面有多少个退格符。

如果反向遍历字符串，就可以先知道有多少个退格符，然后知道退格符左边有多少个字符会被删除，对应的也就知道哪些字符会保留在最终的字符串中。

算法

反向遍历字符串，如果遍历到一个退格符，那么再往左第一个非退格字符将会被删除，剩余未被删除的字符就是最终的字符串。

JavaPython

class Solution(object):
    def backspaceCompare(self, S, T):
        def F(S):
            skip = 0
            for x in reversed(S):
                if x == '#':
                    skip += 1
                elif skip:
                    skip -= 1
                else:
                    yield x

        return all(x == y for x, y in itertools.izip_longest(F(S), F(T)))
复杂度分析

时间复杂度：O(M + N)，其中 M, N 是字符串 S 和 T 的长度。

空间复杂度：O(1)。




