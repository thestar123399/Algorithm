给定有效字符串 "abc"。

对于任何有效的字符串 V，我们可以将 V 分成两个部分 X 和 Y，使得 X + Y（X 与 Y 连接）等于 V。（X 或 Y 可以为空。）那么，X + "abc" + Y 也同样是有效的。

例如，如果 S = "abc"，则有效字符串的示例是："abc"，"aabcbc"，"abcabc"，"abcabcababcc"。无效字符串的示例是："abccba"，"ab"，"cababc"，"bac"。

如果给定字符串 S 有效，则返回 true；否则，返回 false。

 

示例 1：

输入："aabcbc"
输出：true
解释：
从有效字符串 "abc" 开始。
然后我们可以在 "a" 和 "bc" 之间插入另一个 "abc"，产生 "a" + "abc" + "bc"，即 "aabcbc"。
示例 2：

输入："abcabcababcc"
输出：true
解释：
"abcabcabc" 是有效的，它可以视作在原串后连续插入 "abc"。
然后我们可以在最后一个字母之前插入 "abc"，产生 "abcabcab" + "abc" + "c"，即 "abcabcababcc"。
示例 3：

输入："abccba"
输出：false
示例 4：

输入："cababc"
输出：false
 

提示：

1 <= S.length <= 20000
S[i] 为 'a'、'b'、或 'c'

C++
class Solution {
public:
    bool isValid(string s) {
        string temp = "abc";
        while(s.length() > 0){
            int n;
            if((n = s.find(temp)) != string::npos){
                s.replace(n,3,"");
            }
            else break;
        }

        if(s.length() == 0) return true;
        return false;
    }
};

C++
*****************************************************************
方法一
栈解法
为了能够方便取到倒数第一个数与倒数第二个数，这里用一个vector来模拟栈行为


class Solution {
public:
    bool isValid(string S) {
        int N = S.size();
        vector<char> st(N, '#');
        int top = 0;
        for (int i = 0; i < N; ++i) {
            if (top >= 2 && st[top - 1] == 'b' && st[top - 2] == 'a' && S[i] == 'c') {
                top -= 2;
            } else {
                st[top++] = S[i];
            }
        }
        return top == 0;
    }
};

或者
解题思路
栈有一道很经典的有效括号的题目，本题采用类似思想：如果遇到不是字符‘c’，就把字符放到vector的最后面；如果遇到‘c’就检查vector里的最后一个字符是否为‘b’,倒数第二个字符是否为‘a’,如果是就删除vector最后两项并继续循环，否则就退出循环，该字符串不是有效字符串。

代码

class Solution {
public:
    bool isValid(string S) {
        if(S.size()%3!=0)return false;
        vector<char>chvec;
        bool judge=true;
        chvec.push_back('#');//先加入两个'#'是为了不用考虑边界；
        chvec.push_back('#');
        int len;
        for(auto i=0;i<S.size();++i)
        {
            len=chvec.size();
            if(S[i]!='c')chvec.push_back(S[i]);
            else 
            {
                if(chvec[len-1]=='b'&&chvec[len-2]=='a')
                {
                    chvec.pop_back();
                    chvec.pop_back();
                }
                else
                {
                    judge=false;
                    break;
                }
            }
        }
        if(judge==true&&chvec.size()==2)return true;
        else return false;
    }
};

方法二 用栈
class Solution {
public:
    bool isValid(string S) {
        stack<char> stk;
        for (char c : S) {
            if (c != 'c') {
                stk.push(c);
            } else {
                if (stk.empty() || stk.top() != 'b') return false;
                stk.pop();
                if (stk.empty() || stk.top() != 'a') return false;
                stk.pop();
            }
        }
        return stk.empty();
    }
};

Java
*********************************************************************
方法一
1.考察栈,所以用栈来解此题;
2.针对字母c,当前字母为c时,就pop b and pop a,如果能正常执行,则无误,反之则有错;
3.最后判断栈是否为空即可;
4.完结。

    public boolean isValid(String S) {
        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < S.length(); i++) {
            if (S.charAt(i) == 'c') {
                if (stack.empty() || stack.pop() != 'b')
                    return false;
                if (stack.empty() || stack.pop() != 'a')
                    return false;
            } else {
                stack.push(S.charAt(i));
            }
        }
        return stack.isEmpty();
    }
以下方法适合刚入门的小伙伴

    public boolean isValid(String S) {
        while (S.contains("abc"))
            S = S.replace("abc", "");
        return S.equals("");
    }

方法二
解题思路
**思路:因为有效字符串"abc"的结尾是字符'c',

所以,每遍历到一个字符'c'时,则先判断当前栈中包含的字符是否可以构成"ab",

若当前栈中靠近栈顶的前两个字符可以构成"ab"则继续,

若当前栈为空或者当前栈中靠近栈顶的前两个字符构不成"ab",则直接返回false;

在遍历完字符串S后,再判断栈是否为空,若栈为空则返回true,若栈非空则返回false;**

代码

class Solution {
    public boolean isValid(String S) {
    	Deque<Character> stack= new LinkedList<>();
    	for(int i=0;i<S.length();i++) {
    		if(stack.peek()==null||S.charAt(i)!='c') {
    			stack.push(S.charAt(i));
    		}else {
    			if(stack.peek()==null||stack.poll()!='b') {
    				return false;
    			}
    			if(stack.peek()==null||stack.poll()!='a') {
    				return false;
    			}
    		}
    	}
    	return stack.peek()==null;
    }
}

方法三
数组实现
使用Stack数据结构的话会比较慢，本题可以使用数组来模拟，提升空间很大。

核心：

如果是字符a或b直接入模拟栈stack，模拟栈大小index++
如果是c,则前两个字符必须能组成"ab"，否则直接无效
最后模拟栈大小index如果是0,则说明能消除完毕，有效，反之无效

// 纯数组实现
class Solution {
	public static boolean isValid(String S) {
		char[] s = S.toCharArray();
		char[] stack = new char[s.length];
		int index = 0;
		for (char cs : s) {
			if (cs != 'c') {
				stack[index++] = cs;
			} else {
				// 当前字符是c,如果前面不是"ab"串,肯定是false
				if (index < 2 || stack[--index ] != 'b'|| stack[--index] != 'a' ) {
					return false;
				}
			}
		}
		return index == 0;
	}
}
以下是栈实现，可以对比一下以上数组实现，基本一致


// 栈实现
class Solution {
	public static boolean isValid_stack(String S) {
		Stack<Character> stack = new Stack<>();
		for (char cs : S.toCharArray()) {
			if (cs == 'a' || cs == 'b') {
				stack.push(cs);
			} else if (cs == 'c') {
				// 当前字符是c,如果前面不是"ab"串,肯定是false
				if (stack.size() < 2 || stack.pop() != 'b' || stack.pop() != 'a') {
					return false;
				}
			}
		}
		return stack.isEmpty();
	}
}

方法四
两种方法都是一个原理：字符串中是否有“abc”，如有，将其replace为**“”**，以此循环，最后判断是否满足条件
第一种方法：
public class Solution2 {
    public boolean isValid(String S) {
        String[] str = S.split("abc");
        while (str.length > 1) {
            StringBuilder tmp = new StringBuilder();
            for (String aStr : str) {
                tmp.append(aStr);
            }
            str = tmp.toString().split("abc");
        }
        return str.length == 0;
    }
}
第二种方法：

class Solution {
    public boolean isValid(String S) {
        while (S.length() > 0 && S.contains("abc"))
            S = S.replace("abc", "");
        return  S.equals("") ;
    }
}


Python
*****************************************************************
方法一
替换函数、栈
大佬的写法（90%左右）
class Solution:
    def isValid(self, S: str) -> bool:
        while 'abc' in S:
            S = S.replace('abc', '')
        return not S
        
        
标准写法（40%左右很慢）
class Solution:
    def isValid(self, S: str) -> bool:
        s = ['']
        for c in S:
            s += [c]
            if s[-1] == 'b' and s[-2] != 'a' or s[-1] == 'c' and s[-2] != 'b':
                return False
            if c == 'c':
                s = s[: -3]
        return not s[1: ]
或者用n//3个abc作为子串去完全匹配S也差不多,但就更复杂了，还是python大法好啊。

方法二
解题思路
用堆栈的思路，如果遇到c，看看前两个是不是ab，是的话一起去掉，不是的话放入堆栈。

代码

class Solution:
    def isValid(self, S: str) -> bool:
        S2 = ''             # 充当堆栈作用
        for e in S:         
            # 如果是c，前面两个是ab，则去掉堆栈中的ab
            if e == 'c' and len(S2) >= 2 and (S2[-1] == 'b' and S2[-2] == 'a'):
                S2 = S2[:-2]   # -2是因为此时c还没放进来
            else:
                S2 += e 
        return S2 == ''

